From 84fe197facb96947638c518639c0913ecad1599b Mon Sep 17 00:00:00 2001
From: Harald Hoyer <harald@redhat.com>
Date: Tue, 8 Oct 2013 14:59:47 +0200
Subject: [PATCH] Doc: cleanup, extend and split and reuse

---
 Makefile             |   8 +-
 dracut.8.asc         |  61 +---
 dracut.asc           | 888 +--------------------------------------------------
 dracut.cmdline.7.asc | 414 ++++++++++++++----------
 dracut.css           | 434 +------------------------
 dracut.modules.7.asc | 293 +++++++++++++++++
 dracut.spec          |   1 +
 dracut.usage.asc     | 526 ++++++++++++++++++++++++++++++
 8 files changed, 1084 insertions(+), 1541 deletions(-)
 create mode 100644 dracut.modules.7.asc
 create mode 100644 dracut.usage.asc

diff --git a/Makefile b/Makefile
index 124a41b1..e7da9484 100644
--- a/Makefile
+++ b/Makefile
@@ -21,7 +21,8 @@ man1pages = lsinitrd.1
 man5pages = dracut.conf.5
 
 man7pages = dracut.cmdline.7 \
-            dracut.bootup.7
+            dracut.bootup.7 \
+            dracut.modules.7
 
 man8pages = dracut.8 \
             dracut-catimages.8 \
@@ -37,7 +38,6 @@ man8pages = dracut.8 \
 
 manpages = $(man1pages) $(man5pages) $(man7pages) $(man8pages)
 
-
 .PHONY: install clean archive rpm testimage test all check AUTHORS doc dracut-version.sh
 
 all: dracut-version.sh dracut-install
@@ -76,7 +76,9 @@ endif
 %.xml: %.asc
 	asciidoc -d manpage -b docbook -o $@ $<
 
-dracut.html: dracut.asc $(manpages) dracut.css
+dracut.8: dracut.usage.asc dracut.8.asc
+
+dracut.html: dracut.asc $(manpages) dracut.css dracut.usage.asc
 	asciidoc -a numbered -d book -b docbook -o dracut.xml dracut.asc
 	xsltproc -o dracut.html --xinclude -nonet \
 		--stringparam custom.css.source dracut.css \
diff --git a/dracut.8.asc b/dracut.8.asc
index 76fc75c4..584514c0 100644
--- a/dracut.8.asc
+++ b/dracut.8.asc
@@ -10,7 +10,7 @@ dracut - low-level tool for generating an initramfs image
 
 SYNOPSIS
 --------
-*dracut* ['OPTION...'] [<image> [_<kernel version>_]]
+*dracut* [__OPTION...__] [__<image>__ [__<kernel version>__]]
 
 DESCRIPTION
 -----------
@@ -37,53 +37,10 @@ Additional debugging info can be produced by adding **rd.debug** to the kernel c
 _/run/initramfs/rdsosreport.txt_ contains all logs and the output of some tools.
 It should be attached to any report about dracut problems.
 
-EXAMPLE
--------
-
-To create a initramfs image, the most simple command is:
-----
-# dracut
-----
-
-This will generate a general purpose initramfs image, with all possible
-functionality resulting of the combination of the installed dracut modules and
-system tools. The image is /boot/initramfs-_++<kernel version>++_.img and
-contains the kernel modules of the currently active kernel with version
-_++<kernel version>++_.
-
-If the initramfs image already exists, dracut will display an error message, and
-to overwrite the existing image, you have to use the --force option.
-----
-# dracut --force
-----
-
-If you want to specify another filename for the resulting image you would issue
-a command like:
-----
-# dracut foobar.img
-----
-
-To generate an image for a specific kernel version, the command would be:
-----
-# dracut foobar.img 2.6.40-1.rc5.f20
-----
-
-A shortcut to generate the image at the default location for a specific kernel
-version is:
-----
-# dracut --kver 2.6.40-1.rc5.f20
-----
-
-If you want to create lighter, smaller initramfs images, you may want to specify
-the --hostonly or -H option. Using this option, the resulting image will
-contain only those dracut modules, kernel modules and filesystems, which are
-needed to boot this specific machine. This has the drawback, that you can't put
-the disk on another controller or machine, and that you can't switch to another
-root filesystem, without recreating the initramfs image. The usage of the
---hostonly option is only for experts and you will have to keep the broken
-pieces. At least keep a copy of a general purpose image (and corresponding
-kernel) as a fallback to rescue your system.
+USAGE
+-----
 
+include::dracut.usage.asc[]
 
 OPTIONS
 -------
@@ -337,7 +294,7 @@ provide a valid _/etc/fstab_.
 **-N, --no-hostonly**::
     Disable Host-Only mode
 
-**--persistent-policy** _<policy>_::
+**--persistent-policy** _<policy>_::
     Use _<policy>_ to address disks and partitions.
     _<policy>_ can be any directory name found in /dev/disk.
     E.g. "by-uuid", "by-label"
@@ -345,7 +302,7 @@ provide a valid _/etc/fstab_.
 **--fstab**::
     Use _/etc/fstab_ instead of _/proc/self/mountinfo_.
 
-**--add-fstab** _<filename>_ ::
+**--add-fstab** _<filename>_::
     Add entries of _<filename>_ to the initramfs /etc/fstab.
 
 **--mount** "_<device>_ _<mountpoint>_ _<filesystem type>_ _<filesystem options>_"::
@@ -358,13 +315,13 @@ provide a valid _/etc/fstab_.
     LVM or an encrypted partition.
     [NB --device can be used for compatibility with earlier releases]
 
-**-i, --include** _<SOURCE>_ _<TARGET>_::
+**-i, --include** _<SOURCE>_ _<TARGET>_::
     include the files in the SOURCE directory into the
     TARGET directory in the final initramfs. If SOURCE is a file, it will be
     installed to TARGET in the final initramfs. This parameter can be specified
     multiple times.
 
-**-I, --install** _<file list>_::
+**-I, --install** _<file list>_::
     install the space separated list of files into the initramfs.
 +
 [NOTE]
@@ -481,7 +438,7 @@ _/etc/conf.d/_::
 _/etc/cmdline_::
     Can contain additional command line options. Deprecated, better use /etc/cmdline.d/*.conf.
 
-_/etc/cmdline.d/*.conf::
+_/etc/cmdline.d/*.conf_::
     Can contain additional command line options.
 
 AVAILABILITY
diff --git a/dracut.asc b/dracut.asc
index c0116581..031b2014 100644
--- a/dracut.asc
+++ b/dracut.asc
@@ -1,7 +1,7 @@
 dracut
 ======
 Harald Hoyer <harald@redhat.com>
-v2.0, March 2011
+v3.0, October 2013
 
 :language: bash
 
@@ -145,885 +145,10 @@ This ensures, that all devices are disassembled and unmounted cleanly.
 
 = User Manual
 
-== Creating an initramfs Image
-To create a initramfs image, the most simple command is:
-----
-# dracut
-----
-
-This will generate a general purpose initramfs image, with all possible
-functionality resulting of the combination of the installed dracut modules and
-system tools. The image is /boot/initramfs-_++<kernel version>++_.img and
-contains the kernel modules of the currently active kernel with version
-_++<kernel version>++_.
-
-If the initramfs image already exists, dracut will display an error message, and
-to overwrite the existing image, you have to use the --force option.
-----
-# dracut --force
-----
-
-If you want to specify another filename for the resulting image you would issue
-a command like:
-----
-# dracut foobar.img
-----
-
-To generate an image for a specific kernel version, the command would be:
-----
-# dracut foobar.img 2.6.40-1.rc5.f20
-----
-
-A shortcut to generate the image at the default location for a specific kernel
-version is:
-----
-# dracut --kver 2.6.40-1.rc5.f20
-----
-
-If you want to create lighter, smaller initramfs images, you may want to specify
-the --host-only or -H option. Using this option, the resulting image will
-contain only those dracut modules, kernel modules and filesystems, which are
-needed to boot this specific machine. This has the drawback, that you can't put
-the disk on another controller or machine, and that you can't switch to another
-root filesystem, without recreating the initramfs image. The usage of the
---host-only option is only for experts and you will have to keep the broken
-pieces. At least keep a copy of a general purpose image (and corresponding
-kernel) as a fallback to rescue your system.
-
-=== Inspecting the Contents
-To see the contents of the image created by dracut, you can use the lsinitrd tool.
-----
-# lsinitrd /boot/initramfs-$(uname -r).img | less
-----
-
-To display the contents of a file in the initramfs also use the lsinitrd tool:
-----
-# lsinitrd /boot/initramfs-$(uname -r).img  /etc/ld.so.conf
-include ld.so.conf.d/*.conf
-----
-
-=== Adding dracut Modules
-Some dracut modules are turned off by default and have to be activated manually.
-You can do this by adding the dracut modules to the configuration file
-_/etc/dracut.conf_ or _/etc/dracut.conf.d/myconf.conf_. See <<dracutconf5>>.
-You can also add dracut modules on the command line
-by using the -a or --add option:
-----
-# dracut --add bootchart initramfs-bootchart.img
-----
-
-To see a list of available dracut modules, use the --list-modules option:
-----
-# dracut --list-modules
-----
-
-or, if you have a dracut version earlier than +008+, issue the command:
-----
-# for mod in /usr/lib/dracut/modules.d/*; do echo ${mod##*/??}; done
-----
-
-=== Omitting dracut Modules
-Sometimes you don't want a dracut module to be included for reasons of speed,
-size or functionality. To do this, either specify the omit_dracutmodules
-variable in the _dracut.conf_ or _/etc/dracut.conf.d/myconf.conf_ configuration
-file (see <<dracutconf5>>), or use the -o or --omit option
-on the command line:
-----
-# dracut -o "multipath lvm" no-multipath-lvm.img
-----
-
-=== Adding Kernel Modules
-If you need a special kernel module in the initramfs, which is not
-automatically picked up by dracut, you have the use the --add-drivers option
-on the command line or  the drivers vaiable in  the _/etc/dracut.conf_
-or _/etc/dracut.conf.d/myconf.conf_ configuration file (see <<dracutconf5>>):
-----
-# dracut --add-drivers mymod initramfs-with-mymod.img
-----
-
-== Boot parameters
-The generated initramfs.img file normally does not contain any system
-configuration files (except for some special exceptions), so the configuration
-has to be done on the kernel command line. With this flexibility, you can easily
-boot from a changed root partition, without the need to recompile the initramfs
-image. So, you could completly change your root partition (move it inside a md
-raid with encryption and LVM on top), as long as you specify the correct
-filesystem LABEL or UUID on the kernel command line for your root device, dracut
-will find it and boot from it.
-
-The kernel command line usually can be configured in _/boot/grub/grub.conf_, if
-grub is your bootloader and it also can be edited in the real boot process in
-the grub menu.
-
-The kernel command line can also be provided by the dhcp server with the
-root-path option. See <<NetworkBoot>>.
-
-For a full reference of all kernel command line parameters, see <<dracut8>>.
-
-=== Specifying the root Device
-This is the only option dracut really needs to boot from your root partition.
-Because your root partition can live in various environments, there are a lot of
-formats for the root= option. The most basic one is root=_++<path to device
-node>++_:
-----
-root=/dev/sda2
-----
-
-Because device node names can change, dependent on the drive ordering, you are
-encouraged to use the filesystem identifier (UUID) or filesystem label (LABEL)
-to specify your root partition:
-----
-root=UUID=19e9dda3-5a38-484d-a9b0-fa6b067d0331
-----
-
-or
-
-----
-root=LABEL=myrootpartitionlabel
-----
-
-To see all UUIDs or LABELs on your system, do:
-----
-# ls -l /dev/disk/by-uuid
-----
-
-or
-
-----
-# ls -l /dev/disk/by-label
-----
-
-If your root partition is on the network see <<NetworkBoot>>.
-
-=== Keyboard Settings
-If you have to input passwords for encrypted disk volumes, you might want to set
-the keyboard layout and specify a display font.
-
-A typical german kernel command would contain:
-----
-vconsole.font=latarcyrheb-sun16 vconsole.keymap=de-latin1-nodeadkeys locale.LANG=de_DE.UTF-8
-----
-
-Setting these options can override the setting stored on your system, if you use
-a modern init system, like systemd.
-
-For dracut versions prior to version +008+ the line would look like:
-----
-LANG=de_DE.UTF-8 SYSFONT=latarcyrheb-sun16 KEYBOARDTYPE=pc KEYTABLE=de-latin1-nodeadkeys
-----
-
-=== Blacklisting Kernel Modules
-Sometimes it is required to prevent the automatic kernel module loading of a
-specific kernel module. To do this, just add rd.blacklist=_++<kernel module
-name>++_, with _++<kernel module name>++_ not containing the _.ko_
-suffix, to the kernel command line. For example:
-----
-rd.driver.blacklist=mptsas rd.driver.blacklist=nouveau
-----
-
-The option can be specified multiple times on the kernel command line.
-
-=== Speeding up the Boot Process
-If you want to speed up the boot process, you can specify as much information
-for dracut on the kernel command as possible. For example, you can tell dracut,
-that you root partition is not on a LVM volume or not on a raid partition, or
-that it lives inside a specific crypto LUKS encrypted volume. By default, dracut
-searches everywhere. A typical dracut kernel command line for a plain primary or
-logical partition would contain:
-----
-rd.luks=0 rd.lvm=0 rd.md=0 rd.dm=0
-----
-
-On systems with dracut version prior to +008+ the line would look like:
-----
-rd_NO_LUKS rd_NO_LVM rd_NO_MD rd_NO_DM
-----
-
-This turns off every automatic assembly of LVM, MD raids, DM raids and crypto LUKS.
-
-Of course, you could also omit the dracut modules in the initramfs creation
-process, but then you would lose the posibility to turn it on on demand.
-
-
-[[Injecting]]
-=== Injecting custom Files
-To add your own files to the initramfs image, you have several possibilities.
-
-The --include option let you specify a source path and a target path. For example
-----
-# dracut --include cmdline-preset /etc/cmdline.d/mycmdline.conf initramfs-cmdline-pre.img
-----
-will create an initramfs image, where the file cmdline-preset will be copied
-inside the initramfs to _/etc/cmdline.d/mycmdline.conf_. --include can only be specified once.
-
-
-----
-# mkdir rd.live.overlay
-# mkdir rd.live.overlay/etc
-# mkdir rd.live.overlay/etc/conf.d
-# mkdir rd.live.overlay/etc/cmdline.d
-# echo "ip=auto" >> rd.live.overlay/etc/cmdline.d/mycmdline.conf
-# echo export FOO=testtest >> rd.live.overlay/etc/conf.d/testvar.conf
-# echo export BAR=testtest >> rd.live.overlay/etc/conf.d/testvar.conf
-# tree rd.live.overlay/
-rd.live.overlay/
-└── etc
-    ├── cmdline.d
-        │   └── mycmdline.conf
-	    └── conf.d
-	            └── testvar.conf
-
-# dracut --include rd.live.overlay / initramfs-rd.live.overlay.img
-----
-
-This will put the contents of the rd.live.overlay directory into the root of the
-initramfs image.
-
-The --install option let you specify several files, which will get installed in
-the initramfs image at the same location, as they are present on initramfs
-creation time.
-
-
-----
-# dracut --install 'strace fsck.ext3 ssh' initramfs-dbg.img
-----
-
-This will create an initramfs with the strace, fsck.ext3 and ssh executables,
-together with the libraries needed to start those. The --install option can be
-specified multiple times.
-
-
-[[NetworkBoot]]
-== Network Boot
-
-If your root partition is on a network drive, you have to have the network
-dracut modules installed to create a network aware initramfs image.
-
-On a Red Hat Enterprise Linux or Fedora system, this means, you have to install
-the _dracut-network_ rpm package:
-
-
-----
-# yum install dracut-network
-----
-
-The resulting initramfs image can be served by a boot manager residing on your
-local hard drive or it can be served by a PXE/TFTP server.
-
-How to setup your PXE/TFTP server can be found in the
-http://docs.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/[Red
-Hat Enterprise Linux Storage Administration Guide].
-
-If you specify ip=auto on the kernel command line, then dracut asks a dhcp
-server about the ip adress for the machine. The dhcp server can also serve an
-additional root-path, which will set the root device for dracut. With this
-mechanism, you have static configuration on your client machine and a
-centralized boot configuration on your TFTP/DHCP server. If you can't pass a
-kernel command line, then you can inject _/etc/cmdline.d/mycmdline.conf_, with a method described
-in <<Injecting>>.
-
-
-
-
-=== Reducing the Image Size
-
-To reduce the size of the initramfs, you should create it with by ommitting all
-dracut modules, which you know, you don't need to boot the machine.
-
-You can also specify the exact dracut and kernel modules to produce a very tiny
-initramfs image.
-
-For example for a NFS image, you would do:
-
-
-----
-# dracut -m "nfs network  base" initramfs-nfs-only.img
-----
-
-Then you would boot from this image with your target machine and reduce the size
-once more by creating it on the target machine with the --host-only option:
-
-
-----
-# dracut -m "nfs network base" --host-only initramfs-nfs-host-only.img
-----
-
-This will reduce the size of the initramfs image significantly.
-
-
-
-=== NFS Root Device
-
-FIXME
-
-=== iSCSI Root Device
-
-FIXME 
-
-=== FCoE Root Device
-
-FIXME
-
-== Troubleshooting
-
-If the boot process does not succeed, you have several options to debug the
-situation. Some of the basic operations are covered here. For more information
-you should also visit:
-http://fedoraproject.org/wiki/How_to_debug_Dracut_problems
-
-
-[[identifying-your-problem-area]]
-=== Identifying your problem area
-. Remove ''rhgb'' and ''quiet'' from the kernel command line
-. Add ''rd.shell'' to the kernel command line. This will present a shell should
-dracut be unable to locate your root device
-. Add ''rd.shell rd.debug log_buf_len=1M'' to the kernel command line so that
-dracut shell commands are printed as they are executed
-. With dracut >= 002-11, you can inspect the rd.debug output with:
-+
-----
-# less /run/initramfs/init.log
-# dmesg | less
-----
-. With dracut >= 022 and systemd, you can inspect the rd.debug output with:
-----
-# journalctl -ab
-----
-. With dracut >= 025 the file /run/initramfs/rdsosreport.txt is generated, which contains all the logs and the output of all significant tools, which are mentioned later.
-
-If you want to save that output, simply mount /boot by hand or insert an USB stick and mount that.
-Then you can store the output for later inspection.
-
-[[information-to-include-in-your-report]]
-=== Information to include in your report
-
-[[all-bug-reports]]
-==== All bug reports
-In all cases, the following should be mentioned and attached to your bug report:
-
-* The exact kernel command-line used. Typically from the bootloader
-configuration file (e.g. _/etc/grub.conf_) or from _/proc/cmdline_.
-* A copy of your disk partition information from _/etc/fstab_, which might be
-obtained booting an old working initramfs or a rescue medium.
-* A device listing from device-mapper. This can be obtained by running the
-command
-+
-----
-# dmsetup ls --tree
-----
-+
-* A list of block device attributes. This can be obtained by running the commands: 
-+
-----
-# blkid -p
-# blkid -p -o udev
-----
-* Turn on dracut debugging (see _the 'debugging dracut' section_), and attach
-all relevant information from the boot log. This can be obtained by running the
-command 
-+
-----
-# dmesg|grep dracut
-----
-+
-* If you use a dracut configuration file, please include _/etc/dracut.conf_ and
-all files in _/etc/dracut.conf.d/*.conf_
-
-[[logical-volume-management-related-problems]]
-==== Logical Volume Management related problems
-As well as the information from <<all-bug-reports>> include the following
-information:
-
-* Include physical volume information by running the command:
-+
-----
-# lvm pvdisplay
-----
-+
-* Include volume group information by running the command:
-+
-----
-# lvm vgdisplay
-----
-+
-* Include logical volume information by running the command:
-+
-----
-# lvm lvdisplay
-----
-
-[[software-raid-related-problems]]
-==== Software RAID related problems
-As well as the information from <<all-bug-reports>>, include the following
-information:
-
-* If using software RAID disk partitions, please include the output of
-+
-----
-# cat /proc/mdstat
-----
-
-[[network-root-device-related-problems]]
-==== Network root device related problems
-This section details information to include when experiencing problems on a
-system whose root device is located on a network attached volume (e.g. iSCSI,
-NFS or NBD). As well as the information from <<all-bug-reports>>, include the
-following information:
-
-
-* Please include the output of
-+
-----
-# /sbin/ifup <interfacename>
-# ip addr show
-----
-
-[[debugging-dracut]]
-=== Debugging dracut
-
-
-[[configure-a-serial-console]]
-==== Configure a serial console
-
-Successfully debugging dracut will require some form of console
-logging during the system boot.  This section documents configuring a
-serial console connection to record boot messages.
-
-. First, enable serial console output for both the kernel and the bootloader.
-. Open the file _/etc/grub.conf_ for editing. Below the line ''timeout=5'', add
-the following:
-+
-----
-serial --unit=0 --speed=9600
-terminal --timeout=5 serial console
-----
-+
-. Also in _/etc/grub.conf_, add the following boot arguemnts to the ''kernel''
-line:
-+
-----
-console=tty0 console=ttyS0,9600
-----
-+
-. When finished, the _/etc/grub.conf_ file should look similar to the example
-below.
-+
-----
-default=0
-timeout=5
-serial --unit=0 --speed=9600
-terminal --timeout=5 serial console
-title Fedora (2.6.29.5-191.fc11.x86_64)
-  root (hd0,0)
-  kernel /vmlinuz-2.6.29.5-191.fc11.x86_64 ro root=/dev/mapper/vg_uc1-lv_root console=tty0 console=ttyS0,9600
-  initrd /dracut-2.6.29.5-191.fc11.x86_64.img
-----
-+
-. More detailed information on how to configure the kernel for console output
-can be found at
-http://www.faqs.org/docs/Linux-HOWTO/Remote-Serial-Console-HOWTO.html#CONFIGURE-KERNEL.
-. Redirecting non-interactive output
-+
---
-NOTE: You can redirect all non-interactive output to _/dev/kmsg_ and the kernel
-will put it out on the console when it reaches the kernel buffer by doing
-
-----
-# exec >/dev/kmsg 2>&1 </dev/console
-----
---
-
-[[using-the-dracut-shell]]
-==== Using the dracut shell
-
-dracut offers a shell for interactive debugging in the event dracut fails to
-locate your root filesystem. To enable the shell:
-
-. Add the boot parameter ''rd.shell'' to your bootloader configuration file
-(e.g. _/etc/grub.conf_)
-. Remove the boot arguments ''rhgb'' and ''quiet''
-+
-A sample _/etc/grub.conf_ bootloader configuration file is listed below.
-+
-----
-default=0
-timeout=5
-serial --unit=0 --speed=9600
-terminal --timeout=5 serial console
-title Fedora (2.6.29.5-191.fc11.x86_64)
-  root (hd0,0)
-  kernel /vmlinuz-2.6.29.5-191.fc11.x86_64 ro root=/dev/mapper/vg_uc1-lv_root console=tty0 rd.shell
-  initrd /dracut-2.6.29.5-191.fc11.x86_64.img
-----
-+
-. If system boot fails, you will be dropped into a shell as seen in the example below.
-+
-----
-No root device found
-Dropping to debug shell.
-
-#
-----
-+
-. Use this shell prompt to gather the information requested above (see <<all-bug-reports>>).
-
-[[accessing-the-root-volume-from-the-dracut-shell]]
-==== Accessing the root volume from the dracut shell
-From the dracut debug shell, you can manually perform the task of locating and
-preparing your root volume for boot. The required steps will depend on how your
-root volume is configured. Common scenarios include:
-
-* A block device (e.g. _/dev/sda7_)
-* A LVM logical volume (e.g. _/dev/VolGroup00/LogVol00_)
-* An encrypted device (e.g. _/dev/mapper/luks-4d5972ea-901c-4584-bd75-1da802417d83_)
-* A network attached device (e.g. netroot=iscsi:@192.168.0.4::3260::iqn.2009-02.org.fedoraproject:for.all)
-
-The exact method for locating and preparing will vary. However, to continue with
-a successful boot, the objective is to locate your root volume and create a
-symlink _/dev/root_ which points to the file system. For example, the following
-example demonstrates accessing and booting a root volume that is an encrypted
-LVM Logical volume.
-
-. Inspect your partitions using parted
-+
-----
-# parted /dev/sda -s p
-Model: ATA HTS541060G9AT00 (scsi)
-Disk /dev/sda: 60.0GB
-Sector size (logical/physical): 512B/512B
-Partition Table: msdos
-Number  Start   End     Size    Type      File system  Flags
-1      32.3kB  10.8GB  107MB   primary   ext4         boot
-2      10.8GB  55.6GB  44.7GB  logical                lvm
-----
-+
-. You recall that your root volume was a LVM logical volume. Scan and activate
-any logical volumes.
-+
-----
-# lvm vgscan
-# lvm vgchange -ay
-----
-+
-. You should see any logical volumes now using the command blkid:
-+
-----
-# blkid
-/dev/sda1: UUID="3de247f3-5de4-4a44-afc5-1fe179750cf7" TYPE="ext4"
-/dev/sda2: UUID="Ek4dQw-cOtq-5MJu-OGRF-xz5k-O2l8-wdDj0I" TYPE="LVM2_member"
-/dev/mapper/linux-root: UUID="def0269e-424b-4752-acf3-1077bf96ad2c" TYPE="crypto_LUKS"
-/dev/mapper/linux-home: UUID="c69127c1-f153-4ea2-b58e-4cbfa9257c5e" TYPE="ext3"
-/dev/mapper/linux-swap: UUID="47b4d329-975c-4c08-b218-f9c9bf3635f1" TYPE="swap"
-----
-+
-. From the output above, you recall that your root volume exists on an encrypted
-block device. Following the guidance disk encryption guidance from the
-Installation Guide, you unlock your encrypted root volume.
-+
-----
-# UUID=$(cryptsetup luksUUID /dev/mapper/linux-root)
-# cryptsetup luksOpen /dev/mapper/linux-root luks-$UUID
-Enter passphrase for /dev/mapper/linux-root:
-Key slot 0 unlocked.
-----
-+
-. Next, make a symbolic link to the unlocked root volume
-+
-----
-# ln -s /dev/mapper/luks-$UUID /dev/root
-----
-+
-. With the root volume available, you may continue booting the system by exiting
-the dracut shell
-+
-----
-# exit
-----
-
-[[additional-dracut-boot-parameters]]
-==== Additional dracut boot parameters
-For more debugging options, see <<dracutkerneldebug>> in <<dracutcmdline7>>.
-
-
-[[debugging-dracut-on-shutdown]]
-==== Debugging dracut on shutdown
-
-To debug the shutdown sequence on systemd systems, you can _rd.break_
-on _pre-shutdown_ or _shutdown_.
-
-To do this from an already booted system:
-----
-# mkdir -p /run/initramfs/etc/cmdline.d
-# echo "rd.break=pre-shutdown" > /run/initramfs/etc/cmdline.d/debug.conf
-# touch /run/initramfs/.need_shutdown
-----
-
-This will give you a dracut shell after the system pivot'ed back in the initramfs.
-
-
-= Developer Manual
-
-== dracut Components
-
-dracut uses a modular system to build and extend the initramfs image. All
-modules are located in _/usr/lib/dracut/modules.d_ or in _<git-src>/modules.d_.
-The most basic dracut module is _99base_. In _99base_ the initial shell script
-init is defined, which gets run by the kernel after initramfs loading. Although
-you can replace init with your own version of _99base_, this is not encouraged.
-Instead you should use, if possible, the hooks of dracut. All hooks, and the
-point of time in which they are executed, are described in <<stages>>.
-
-The main script, which creates the initramfs is dracut itsself. It parses all
-arguments and sets up the directory, in which everything is installed. It then
-executes all check, install, installkernel scripts found in the modules, which
-are to be processed. After everything is installed, the install directory is
-archived and compressed to the final initramfs image. All helper functions used
-by check, install and installkernel are found in in the file _dracut-functions_.
-These shell functions are available to all module installer (install,
-installkernel) scripts, without the need to source _dracut-functions_.
-
-A module can check the preconditions for install and installkernel with the
-check script. Also dependencies can be expressed with check. If a module passed
-check, install and installkernel will be called to install all of the necessary
-files for the module. To split between kernel and non-kernel parts of the
-installation, all kernel module related parts have to be in installkernel. All
-other files found in a module directory are module specific and mostly are hook
-scripts and udev rules.
-
-
-[[stages]]
-== Boot Process Stages
-
-dracut modules can insert custom script at various points, to control the boot
-process.
-These hooks are plain directories containing shell scripts ending with ".sh",
-which are sourced by init.
-Common used functions are in _dracut-lib.sh_, which can be sourced by any script.
-
-=== Hook: cmdline
-
-The _cmdline_ hook is a place to insert scripts to parse the kernel command line
-and prepare the later actions, like setting up udev rules and configuration
-files.
-
-In this hook the most important environment variable is defined: root. The
-second one is rootok, which indicates, that a module claimed to be able to parse
-the root defined. So for example, **root=**__iscsi:....__ will be claimed by the
-iscsi dracut module, which then sets rootok.
-
-=== Hook: pre-udev
-
-This hook is executed right after the cmdline hook and a check if root and
-rootok were set. Here modules can take action with the final root, and before
-udev has been run.
-
-=== Start Udev
-
-Now udev is started and the logging for udev is setup.
-
-=== Hook: pre-trigger
-
-In this hook, you can set udev environment variables with **udevadm control
---property=KEY=_value_** or control the further execution of udev with
-udevadm.
-
-=== Trigger Udev
-
-udev is triggered by calling udevadm trigger, which sends add events for all
-devices and subsystems.
-
-=== Main Loop
-
-In the main loop of dracut loops until udev has settled and
-all scripts in _initqueue/finished_ returned true.
-In this loop there are three hooks, where scripts can be inserted
-by calling /sbin/initqueue.
-
-==== Initqueue
-
-This hook gets executed every time a script is inserted here, regardless of the
-udev state.
-
-==== Initqueue settled
-
-This hooks (initqueue/settled) gets executed every time udev has settled.
-
-
-==== Initqueue timeout
-
-This hooks (initqueue/timeout) gets executed, when the main loop counter becomes half of the
-rd.retry counter.
-
-==== Initqueue finished
-
-This hook (initqueue/finished) is called after udev has settled and
-if all scripts herein return 0 the main loop will be ended.
-Abritary scripts can be added here, to loop in the
-initqueue until something happens, which a dracut module wants to wait for.
-
-=== Hook: pre-mount
-
-Before the root device is mounted all scripts in the hook pre-mount are
-executed. In some cases (e.g. NFS) the real root device is already mounted,
-though.
-
-=== Hook: mount
-
-This hook is mainly to mount the real root device.
-
-=== Hook: pre-pivot
-
-This hook is called before cleanup hook, This is a good place for
-actions other than cleanups which need to be called before pivot.
-
-=== Hook: cleanup
-
-This hook is the last hook and is called before init finally switches root to
-the real root device. This is a good place to clean up and kill processes not
-needed anymore.
-
-
-=== Cleanup and switch_root
-
-Init (or systemd) kills all udev processes, cleans up the environment,
-sets up the arguments for the real init process and finally calls switch_root.
-switch_root removes the whole filesystem hierarchy of the initramfs,
-chroot()s to the real root device and calls /sbin/init with the specified arguments.
-
-To ensure all files in the initramfs hierarchy can be removed, all processes
-still running from the initramfs should not have any open file descriptors left.
-
-== Network Infrastructure
-
-FIXME
-
-== Writing a Module
-
-A simple example module is _96insmodpost_, which modprobes a kernel module after
-udev has settled and the basic device drivers have been loaded.
-
-All module installation information is in the file module-setup.sh.
-
-First we create a check() function, which just exits with 0 indicating that this
-module should be included by default.
-
-check():
-----
-return 0
-----
-
-The we create the install() function, which installs a cmdline hook with
-priority number 20 called _parse-insmodpost.sh_. It also installs the
-_insmodpost.sh_ script in _/sbin_.
-
-install():
-----
-inst_hook cmdline 20 "$moddir/parse-insmodpost.sh"
-inst_simple "$moddir/insmodpost.sh" /sbin/insmodpost.sh
-----
-
-The _pase-instmodpost.sh_ parses the kernel command line for a argument
-rd.driver.post, blacklists the module from being autoloaded and installs the
-hook _insmodpost.sh_ in the _initqueue/settled_.
-
-_parse-insmodpost.sh_:
-----
-for p in $(getargs rd.driver.post=); do
-    echo "blacklist $p" >> /etc/modprobe.d/initramfsblacklist.conf
-    _do_insmodpost=1
-done
-
-[ -n "$_do_insmodpost" ] && /sbin/initqueue --settled --unique --onetime /sbin/insmodpost.sh
-unset _do_insmodpost
-
-----
-
-_insmodpost.sh_, which is called in the _initqueue/settled_ hook will just
-modprobe the kernel modules specified in all rd.driver.post kernel command line
-parameters. It runs after udev has settled and is only called once (--onetime).
-
-_insmodpost.sh_:
-----
-. /lib/dracut-lib.sh
-
-for p in $(getargs rd.driver.post=); do
-    modprobe $p
-done
-
-----
-
-
-
-=== check()
-
-_check()_ is called by dracut to evaluate the inclusion of a dracut module in
-the initramfs.
-
-$hostonly:: If the $hostonly variable is set, then the module check() function
-should be in "hostonly" mode, which means, that the check() should only return
-0, if the module is really needed to boot this specific host.
-
-check() should return with:
-
-0:: Include the dracut module in the initramfs.
-
-1:: Do not include the dracut module. The requirements are not fullfilled
-(missing tools, etc.)
-
-255:: Only include the dracut module, if another module requires it or if
-explicitly specified in the config file or on the argument list.
-
-
-
-=== depends()
-
-The function depends() should echo all other dracut module names the module
-depends on.
-
-
-
-=== install()
-
-inst_multiple
-
-inst
-
-inst_hook
-
-inst_rules
-
-
-
-
-
-=== installkernel()
-
-instmods
-
-
-
-=== Creation Functions
-
-FIXME
-
-
-=== Initramfs Functions
-
-FIXME
-
-
-=== Network Modules
-
-FIXME
-
 :leveloffset: 1
-[[dracutbootup7]]
-include::dracut.bootup.7.asc[]
-
-:leveloffset: 1
-[[dracut8]]
 include::dracut.8.asc[]
 
+:leveloffset: 1
 [[dracutconf5]]
 include::dracut.conf.5.asc[]
 
@@ -1036,6 +161,15 @@ include::lsinitrd.1.asc[]
 [[mkinitrd8]]
 include::mkinitrd.8.asc[]
 
+= Developer Manual
+
+:leveloffset: 1
+[[dracutmodules7]]
+include::dracut.modules.7.asc[]
+
+[[dracutbootup7]]
+include::dracut.bootup.7.asc[]
+
 :leveloffset: 0
 [appendix]
 License
diff --git a/dracut.cmdline.7.asc b/dracut.cmdline.7.asc
index 4b2ab035..19bfb939 100644
--- a/dracut.cmdline.7.asc
+++ b/dracut.cmdline.7.asc
@@ -31,16 +31,16 @@ line is the value, which is honored.
 
 Standard
 ~~~~~~~~
-**init=**_<path to real init>_::
+**init=**__<path to real init>__::
     specify the path to the init programm to be started after the initramfs has
     finished
 
-**root=**_<path to blockdevice>_::
+**root=**__<path to blockdevice>__::
     specify the block device to use as the root filesystem.
 +
-E.g.:
-+
-----
+[listing]
+.Example
+--
 root=/dev/sda1
 root=/dev/disk/by-path/pci-0000:00:1f.1-scsi-0:0:1:0-part1
 root=/dev/disk/by-label/Root
@@ -48,15 +48,17 @@ root=LABEL=Root
 root=/dev/disk/by-uuid/3f5ad593-4546-4a94-a374-bcfb68aa11f7
 root=UUID=3f5ad593-4546-4a94-a374-bcfb68aa11f7
 root=PARTUUID=3f5ad593-4546-4a94-a374-bcfb68aa11f7
-----
+--
 
-**rootfstype=**_<filesystem type>_:: "auto" if not specified, e.g.:
+**rootfstype=**__<filesystem type>__:: "auto" if not specified.
 +
-----
+[listing]
+.Example
+--
 rootfstype=ext3
-----
+--
 
-**rootflags=**_<mount options>_::
+**rootflags=**__<mount options>__::
     specify additional mount options for the root filesystem. If not set,
     _/etc/fstab_ of the real root will be parsed for special mount options and
     mounted accordingly.
@@ -69,7 +71,7 @@ rootfstype=ext3
     force mounting _/_ and _/usr_ (if it is a separate device) read-write.
     See also ro option.
 
-**rootfallback=**_<path to blockdevice>_::
+**rootfallback=**__<path to blockdevice>__::
     specify the block device to use as the root filesystem, if the normal root cannot be found.
     This can only be a simple block device with a simple file system, for which the filesystem
     driver is either compiled in, or added manually to the initramfs.
@@ -83,16 +85,16 @@ rootfstype=ext3
     do not honor special mount options for the root filesystem found in
     _/etc/fstab_ of the real root.
 
-**resume=**_<path to resume partition>_::
+**resume=**__<path to resume partition>__::
     resume from a swap partition
 +
-E.g.:
-+
-----
+[listing]
+.Example
+--
 resume=/dev/disk/by-path/pci-0000:00:1f.1-scsi-0:0:1:0-part1
 resume=/dev/disk/by-uuid/3f5ad593-4546-4a94-a374-bcfb68aa11f7
 resume=UUID=3f5ad593-4546-4a94-a374-bcfb68aa11f7
-----
+--
 
 **rd.skipfsck**::
     skip fsck for rootfs and _/usr_.  If you're mounting _/usr_ read-only and
@@ -102,19 +104,19 @@ resume=UUID=3f5ad593-4546-4a94-a374-bcfb68aa11f7
 
 Misc
 ~~~~
-**rd.driver.blacklist=**_<drivername>[,<drivername>,...]_::
+**rd.driver.blacklist=**__<drivername>__[,__<drivername>__,...]::
     do not load kernel module <drivername>. This parameter can be specified
     multiple times.
 
-**rd.driver.pre=**_<drivername>[,<drivername>,...]_::
+**rd.driver.pre=**__<drivername>__[,__<drivername>__,...]::
     force loading kernel module <drivername>. This parameter can be specified
     multiple times.
 
-**rd.driver.post=**_<drivername>[,<drivername>,...]_::
+**rd.driver.post=**__<drivername>__[,__<drivername>__,...]::
     force loading kernel module <drivername> after all automatic loading modules
     have been loaded. This parameter can be specified multiple times.
 
-**rd.retry=**_<seconds>_::
+**rd.retry=**__<seconds>__::
     specify how long dracut should wait for devices to appear.
     The default is 30 seconds. After 2/3 of the time, degraded raids are force
     started. If you have hardware, which takes a very long time to announce its
@@ -123,7 +125,7 @@ Misc
 **rd.noverifyssl**::
     accept self-signed certificates for ssl downloads.
 
-**rd.ctty=**_<terminal device>_**::
+**rd.ctty=**__<terminal device>__::
    specify the controlling terminal for the console.
    This is useful, if you have multiple "console=" arguments.
 
@@ -150,17 +152,20 @@ It should be attached to any report about dracut problems.
     If "quiet" is set, it also logs to the console.
 
 **rd.memdebug=[0-3]**::
-    Print memory usage info at various points, set the verbose level from 0 to 3
+    Print memory usage info at various points, set the verbose level from 0 to 3. +
     Higher level means more debugging output:
++
+----
     0 - no output
     1 - partial /proc/meminfo
     2 - /proc/meminfo
     3 - /proc/meminfo + /proc/slabinfo
+----
 
 **rd.break**::
     drop to a shell at the end
 
-**rd.break=**_{cmdline|pre-udev|pre-trigger|initqueue|pre-mount|mount|pre-pivot|cleanup}_::
+**rd.break=**__{cmdline|pre-udev|pre-trigger|initqueue|pre-mount|mount|pre-pivot|cleanup}__::
     drop to a shell on defined breakpoint
 
 **rd.udev.info**::
@@ -171,50 +176,56 @@ It should be attached to any report about dracut problems.
 
 I18N
 ~~~~
-**vconsole.keymap=**_<keymap base file name>_::
+**rd.vconsole.keymap=**__<keymap base file name>__::
     keyboard translation table loaded by loadkeys; taken from keymaps directory;
-    will be written as KEYMAP to _/etc/vconsole.conf_ in the initramfs, e.g.:
+    will be written as KEYMAP to _/etc/vconsole.conf_ in the initramfs.
 +
-----
-vconsole.keymap=de-latin1-nodeadkeys
-----
+[listing]
+.Example
+--
+rd.vconsole.keymap=de-latin1-nodeadkeys
+--
 
-**vconsole.keymap.ext=**_<list of keymap base file names>_::
+**rd.vconsole.keymap.ext=**__<list of keymap base file names>__::
     list of extra keymaps to bo loaded (sep. by space); will be written as
     EXT_KEYMAP to _/etc/vconsole.conf_ in the initramfs
 
-**vconsole.unicode**[=_{0|1}_]::
+**rd.vconsole.unicode**::
     boolean, indicating UTF-8 mode; will be written as UNICODE to
     _/etc/vconsole.conf_ in the initramfs
 
-**vconsole.font=**_<font base file name>_::
+**rd.vconsole.font=**__<font base file name>__::
     console font; taken from consolefonts directory; will be written as FONT to
-    _/etc/vconsole.conf_ in the initramfs; e.g.:
+    _/etc/vconsole.conf_ in the initramfs.
 +
-----
-vconsole.font=LatArCyrHeb-16
-----
+[listing]
+.Example
+--
+rd.vconsole.font=LatArCyrHeb-16
+--
 
-**vconsole.font.map=**_<console map base file name>_::
+**rd.vconsole.font.map=**__<console map base file name>__::
     see description of '-m' parameter in setfont manual; taken from consoletrans
     directory; will be written as FONT_MAP to _/etc/vconsole.conf_ in the
     initramfs
 
-**vconsole.font.unimap=**_<unicode table base file name>_::
+**rd.vconsole.font.unimap=**__<unicode table base file name>__::
     see description of '-u' parameter in setfont manual; taken from unimaps
     directory; will be written as FONT_UNIMAP to _/etc/vconsole.conf_ in the
     initramfs
 
-**locale.LANG=**_<locale>_::
+**rd.locale.LANG=**__<locale>__::
     taken from the environment; if no UNICODE is defined we set its value in
     basis of LANG value (whether it ends with ".utf8" (or similar) or not); will
-    be written as LANG to _/etc/locale.conf_ in the initramfs; e.g.:
+    be written as LANG to _/etc/locale.conf_ in the initramfs.
 +
-----
-locale.LANG=pl_PL.utf8
-----
+[listing]
+.Example
+--
+rd.locale.LANG=pl_PL.utf8
+--
 
-**locale.LC_ALL=**_<locale>_::
+**rd.locale.LC_ALL=**__<locale>__::
     taken from the environment; will be written as LC_ALL to _/etc/locale.conf_
     in the initramfs
 
@@ -223,11 +234,11 @@ LVM
 **rd.lvm=0**::
     disable LVM detection
 
-**rd.lvm.vg=**_<volume group name>_::
+**rd.lvm.vg=**__<volume group name>__::
     only activate the volume groups with the given name. rd.lvm.vg can be
     specified multiple times on the kernel command line.
 
-**rd.lvm.lv=**_<logical volume name>_::
+**rd.lvm.lv=**__<logical volume name>__::
     only activate the logical volumes with the given name. rd.lvm.lv can be
     specified multiple times on the kernel command line.
 
@@ -239,14 +250,14 @@ crypto LUKS
 **rd.luks=0**::
     disable crypto LUKS detection
 
-**rd.luks.uuid=**_<luks uuid>_::
+**rd.luks.uuid=**__<luks uuid>__::
     only activate the LUKS partitions with the given UUID. Any "luks-" of the
     LUKS UUID is removed before comparing to _<luks uuid>_.
     The comparisons also matches, if _<luks uuid>_ is only the beginning of the
     LUKS UUID, so you don't have to specify the full UUID.
     This parameter can be specified multiple times.
 
-**rd.luks.allow-discards=**_<luks uuid>_::
+**rd.luks.allow-discards=**__<luks uuid>__::
     Allow  using  of discards (TRIM) requests for LUKS partitions with the given UUID.
     Any "luks-" of the LUKS UUID is removed before comparing to _<luks uuid>_.
     The comparisons also matches, if _<luks uuid>_ is only the beginning of the
@@ -261,16 +272,18 @@ crypto LUKS
 
 crypto LUKS - key on removable device support
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-**rd.luks.key=**_<keypath>:<keydev>:<luksdev>_::
+**rd.luks.key=**__<keypath>__:__<keydev>__:__<luksdev>__::
     _keypath_ is a path to key file to look for. It's REQUIRED. When _keypath_ ends with '.gpg' it's considered to be key encrypted symmetrically with GPG. You will be prompted for password on boot. GPG support comes with 'crypt-gpg' module which needs to be added explicitly.
 +
 _keydev_ is a device on which key file resides. It might be kernel name of devices (should start with "/dev/"), UUID (prefixed with "UUID=") or label (prefix with "LABEL="). You don't have to specify full UUID. Just its beginning will suffice, even if its ambiguous. All matching devices will be probed. This parameter is recommended, but not required. If not present, all block devices will be probed, which may significantly increase boot time.
 +
 If _luksdev_ is given, the specified key will only be applied for that LUKS device. Possible values are the same as for _keydev_. Unless you have several LUKS devices, you don't have to specify this parameter. The simplest usage is:
 +
-----
+[listing]
+.Example
+--
 rd.luks.key=/foo/bar.key
-----
+--
 +
 As you see, you can skip colons in such a case.
 +
@@ -281,20 +294,20 @@ to crypsetup luksFormat with _-d -_, too!
 
 Here follows example for key encrypted with GPG:
 
-----
-gpg --quiet --decrypt rootkey.gpg \
-| cryptsetup -d - -v \
---cipher serpent-cbc-essiv:sha256 \
+[listing]
+--
+gpg --quiet --decrypt rootkey.gpg | \
+cryptsetup -d - -v --cipher serpent-cbc-essiv:sha256 \
 --key-size 256 luksFormat /dev/sda3
-----
+--
 
 If you use plain keys, just add path to _-d_ option:
 
-----
-cryptsetup -d rootkey.key -v \
---cipher serpent-cbc-essiv:sha256 \
---key-size 256 luksFormat /dev/sda3
-----
+[listing]
+--
+cryptsetup -d rootkey.key -v --cipher serpent-cbc-essiv:sha256 \
+ --key-size 256 luksFormat /dev/sda3
+--
 ===============================
 
 MD RAID
@@ -314,7 +327,7 @@ MD RAID
 **rd.md.waitclean=1**::
     wait for any resync, recovery, or reshape activity to finish before continuing
 
-**rd.md.uuid=**_<md raid uuid>_::
+**rd.md.uuid=**__<md raid uuid>__::
     only activate the raid sets with the given UUID. This parameter can be
     specified multiple times.
 
@@ -323,7 +336,7 @@ DM RAID
 **rd.dm=0**::
     disable DM RAID detection
 
-**rd.dm.uuid=**_<dm raid uuid>_::
+**rd.dm.uuid=**__<dm raid uuid>__::
    only activate the raid sets with the given UUID. This parameter can be
    specified multiple times.
 
@@ -332,15 +345,17 @@ FIPS
 **rd.fips**::
     enable FIPS
 
-**boot=**_<boot device>_::
-    specify the device, where /boot is located. e.g.
+**boot=**__<boot device>__::
+    specify the device, where /boot is located.
 +
-----
+[listing]
+.Example
+--
 boot=/dev/sda1
 boot=/dev/disk/by-path/pci-0000:00:1f.1-scsi-0:0:1:0-part1
 boot=UUID=<uuid>
 boot=LABEL=<label>
-----
+--
 
 **rd.fips.skipkernel**::
     skip checksum check of the kernel image. Useful, if the kernel image is not
@@ -348,7 +363,66 @@ boot=LABEL=<label>
 
 Network
 ~~~~~~~
-**ip=**_{dhcp|on|any|dhcp6|auto6|ibft}_::
+
+[IMPORTANT]
+=====================
+It is recommended to either bind an interface to a MAC with the **ifname** argument,
+or to use the systemd-udevd predictable network interface names.
+
+Predictable network interface device names based on:
+
+- firmware/bios-provided index numbers for on-board devices
+- firmware-provided pci-express hotplug slot index number
+- physical/geographical location of the hardware
+- the interface's MAC address
+
+See: http://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames
+
+Two character prefixes based on the type of interface:
+
+en:: ethernet
+wl:: wlan
+ww:: wwan
+
+Type of names:
+
+o<index>:: on-board device index number
+s<slot>[f<function>][d<dev_id>]:: hotplug slot index number
+x<MAC>:: MAC address
+[P<domain>]p<bus>s<slot>[f<function>][d<dev_id>]:: PCI geographical location
+[P<domain>]p<bus>s<slot>[f<function>][u<port>][..][c<config>][i<interface>]:: USB port number chain
+
+All multi-function PCI devices will carry the [f<function>] number in the
+device name, including the function 0 device.
+
+When using PCI geography, The PCI domain is only prepended when it is not 0.
+
+For USB devices the full chain of port numbers of hubs is composed. If the
+name gets longer than the maximum number of 15 characters, the name is not
+exported.
+The usual USB configuration == 1 and interface == 0 values are suppressed.
+
+PCI ethernet card with firmware index "1"::
+* eno1
+
+PCI ethernet card in hotplug slot with firmware index number::
+* ens1
+
+PCI ethernet multi-function card with 2 ports::
+* enp2s0f0
+* enp2s0f1
+
+PCI wlan card::
+* wlp3s0
+
+USB built-in 3G modem::
+* wwp0s29u1u4i6
+
+USB Android phone::
+* enp0s29u1u2
+=====================
+
+**ip=**__{dhcp|on|any|dhcp6|auto6|ibft}__::
     dhcp|on|any::: get ip from dhcp server from all interfaces. If root=dhcp, loop
     sequentially through all interfaces (eth0, eth1, ...) and use the first with
     a valid DHCP root-path.
@@ -359,7 +433,7 @@ Network
 
     ibft::: iBFT autoconfiguration
 
-**ip=**_<interface>_:_{dhcp|on|any|dhcp6|auto6}_[:[_<mtu>_][:_<macaddr>_]]::
+**ip=**__<interface>__:__{dhcp|on|any|dhcp6|auto6}__[:[__<mtu>__][:__<macaddr>__]]::
     This parameter can be specified multiple times.
 +
 =====================
@@ -370,16 +444,7 @@ cannot be used in conjunction with the **ifname** argument for the
 same <interface>.
 =====================
 
-[IMPORTANT]
-=====================
-It is recommended to either bind <interface> to a MAC with the **ifname**
-argument. Or use biosdevname to name your interfaces, which will then have names according to their hardware location.
-
-em<port>::: for embedded NICs
-p<slot>#<port>_<virtual instance>::: for cards in PCI slots
-=====================
-
-**ip=**_<client-IP>_:_<server-IP>_:_<gateway-IP>_:_<netmask>_:_<client_hostname>_:_<interface>_:_{none|off|dhcp|on|any|dhcp6|auto6|ibft}_[:[_<mtu>_][:_<macaddr>_]]::
+**ip=**__<client-IP>__:__<server-IP>__:__<gateway-IP>__:__<netmask>__:__<client_hostname>__:__<interface>__:__{none|off|dhcp|on|any|dhcp6|auto6|ibft}__:[:[__<mtu>__][:__<macaddr>__]]::
     explicit network configuration. If you want do define a IPv6 address, put it
     in brackets (e.g. [2001:DB8::1]). This parameter can be specified multiple
     times.
@@ -390,25 +455,14 @@ cannot be used in conjunction with the **ifname** argument for the
 same <interface>.
 =====================
 
-[IMPORTANT]
-=====================
-It is recommended to either bind <interface> to a MAC with the **ifname**
-argument. Or use biosdevname to name your interfaces, which will then have names according to their hardware location.
-
-em<port>::: for embedded NICs
-p<slot>#<port>_<virtual instance>::: for cards in PCI slots
-=====================
-
-**ifname=**_<interface>_:_<MAC>_::
+**ifname=**__<interface>__:__<MAC>__::
     Assign network device name <interface> (ie "bootnet") to the NIC with MAC <MAC>.
 +
-[IMPORTANT]
-
-Do **not** use the default kernel naming scheme for the interface name,
+WARNING: Do **not** use the default kernel naming scheme for the interface name,
 as it can conflict with the kernel names. So, don't use "eth[0-9]+" for the
 interface name. Better name it "bootnet" or "bluesocket".
 
-**bootdev=**_<interface>_::
+**bootdev=**__<interface>__::
     specify network interface to use routing and netroot information from.
     Required if multiple ip= lines are used.
 
@@ -421,12 +475,12 @@ interface name. Better name it "bootnet" or "bluesocket".
 **rd.neednet=1**::
     boolean, bring up network even without netroot set
 
-**vlan=_<vlanname>_:_<phydevice>_**::
+**vlan=**__<vlanname>__:__<phydevice>__::
     Setup vlan device named <vlanname> on <phydeivce>.
     We support the four styles of vlan names: VLAN_PLUS_VID (vlan0005), VLAN_PLUS_VID_NO_PAD (vlan5),
     DEV_PLUS_VID (eth0.0005), DEV_PLUS_VID_NO_PAD (eth0.5)
 
-**bond=_<bondname>_[:_<bondslaves>_:[:_<options>_]]**::
+**bond=**__<bondname>__[:__<bondslaves>__:[:__<options>__]]::
     Setup bonding device <bondname> on top of <bondslaves>.
     <bondslaves> is a comma-separated list of physical (ethernet) interfaces.
     <options> is a comma-separated list on bonding options (modinfo bonding for details)
@@ -434,68 +488,63 @@ interface name. Better name it "bootnet" or "bluesocket".
     then its values should be separated by semicolon.
     Bond without parameters assumes bond=bond0:eth0,eth1:mode=balance-rr
 
-**team =_<teammaster>_:_<teamslaves>_**::
+**team=**__<teammaster>__:__<teamslaves>__::
     Setup team device <teammaster> on top of <teamslaves>.
     <teamslaves> is a comma-separated list of physical (ethernet) interfaces.
 
-**bridge=_<bridgename>_:_<ethnames>_**::
+**bridge=**__<bridgename>__:__<ethnames>__::
     Setup bridge <bridgename> with <ethnames>. <ethnames> is a comma-separated
     list of physical (ethernet) interfaces. Bridge without parameters assumes bridge=br0:eth0
 
-
 NFS
 ~~~
-**root=**[_<server-ip>_:]_<root-dir>_[:_<nfs-options>_]::
+**root=**\[_<server-ip>_:]__<root-dir>__[:__<nfs-options>__]::
     mount nfs share from <server-ip>:/<root-dir>, if no server-ip is given, use
     dhcp next_server. if server-ip is an IPv6 address it has to be put in
     brackets, e.g. [2001:DB8::1]. NFS options can be appended with the prefix
     ":" or "," and are seperated by ",".
 
-**root=**nfs:[_<server-ip>_:]_<root-dir>_[:_<nfs-options>_], **root=**nfs4:[_<server-ip>_:]_<root-dir>_[:_<nfs-options>_], **root=**_{dhcp|dhcp6}_::
+**root=**nfs:\[_<server-ip>_:]__<root-dir>__[:__<nfs-options>__], **root=**nfs4:\[_<server-ip>_:]__<root-dir>__[:__<nfs-options>__], **root=**__{dhcp|dhcp6}__::
     root=dhcp alone directs initrd to look at the DHCP root-path where NFS
     options can be specified.
 +
-----
+[listing]
+.Example
+--
     root-path=<server-ip>:<root-dir>[,<nfs-options>]
     root-path=nfs:<server-ip>:<root-dir>[,<nfs-options>]
     root-path=nfs4:<server-ip>:<root-dir>[,<nfs-options>]
-----
+--
 
-**root=**_/dev/nfs_ nfsroot=[_<server-ip>_:]_<root-dir>_[:_<nfs-options>_]::
+**root=**_/dev/nfs_ nfsroot=\[_<server-ip>_:]__<root-dir>__[:__<nfs-options>__]::
     _Deprecated!_ kernel Documentation_/filesystems/nfsroot.txt_ defines this
     method. This is supported by dracut, but not recommended.
 
-**rd.nfs.domain=**_<NFSv4 domain name>_::
+**rd.nfs.domain=**__<NFSv4 domain name>__::
     Set the NFSv4 domain name. Will overwrite the settings in _/etc/idmap.conf_.
 
 CIFS
 ~~~
-**root=**cifs://[_<username>_[:_<password>_]@]_<server-ip>_:_<root-dir>_::
+**root=**cifs://[__<username>__[:__<password>__]@]__<server-ip>__:__<root-dir>__::
     mount cifs share from <server-ip>:/<root-dir>, if no server-ip is given, use
     dhcp next_server. if server-ip is an IPv6 address it has to be put in
     brackets, e.g. [2001:DB8::1]. If a username or password are not specified
 as part of the root, then they must be passed on the command line through
 cifsuser/cifspass.
 +
-[WARNING]
-====
-Passwords specified on the kernel command line are visible for all users via the file _/proc/cmdline_ and via dmesg or can be sniffed on the network, when using DHCP with DHCP root-path.
-====
+WARNING: Passwords specified on the kernel command line are visible for all users via the file _/proc/cmdline_ and via dmesg or can be sniffed on the network, when using DHCP with DHCP root-path.
 
-**cifsuser=_<username>_::
+**cifsuser**=__<username>__::
     Set the cifs username, if not specified as part of the root.
 
-**cifspass=_<password>_::
+**cifspass**=__<password>__::
     Set the cifs password, if not specified as part of the root.
 +
-[WARNING]
-====
-Passwords specified on the kernel command line are visible for all users via the file _/proc/cmdline_ and via dmesg or can be sniffed on the network, when using DHCP with DHCP root-path.
-====
+WARNING: Passwords specified on the kernel command line are visible for all users via the file _/proc/cmdline_ and via dmesg or can be sniffed on the network, when using DHCP with DHCP root-path.
 
 iSCSI
 ~~~~~
-**root=**iscsi:[_<username>_:_<password>_[:_<reverse>_:_<password>_]@][_<servername>_]:[_<protocol>_]:[_<port>_][:[_<iscsi_iface_name>_]:[_<netdev_name>_]]:[_<LUN>_]:_<targetname>_::
+**root=**iscsi:[__<username>__:__<password>__[:__<reverse>__:__<password>__]@][__<servername>__]:[__<protocol>__]:[__<port>__][:[__<iscsi_iface_name>__]:[__<netdev_name>__]]:[__<LUN>__]:__<targetname>__::
     protocol defaults to "6", LUN defaults to "0". If the "servername" field is
     provided by BOOTP or DHCP, then that field is used in conjunction with other
     associated fields to contact the boot server in the Boot stage. However, if
@@ -503,85 +552,84 @@ iSCSI
     used in the Discovery Service stage in conjunction with other associated
     fields. See
     link:$$http://tools.ietf.org/html/rfc4173#section-5$$[rfc4173].
-    e.g.:
 +
-----
+WARNING: Passwords specified on the kernel command line are visible for all users via the file _/proc/cmdline_ and via dmesg or can be sniffed on the network, when using DHCP with DHCP root-path.
++
+[listing]
+.Example
+--
 root=iscsi:192.168.50.1::::iqn.2009-06.dracut:target0
-----
+--
 +
-If servername is an IPv6 address, it has to be put in brackets. e.g.:
+If servername is an IPv6 address, it has to be put in brackets:
 +
-----
+[listing]
+.Example
+--
 root=iscsi:[2001:DB8::1]::::iqn.2009-06.dracut:target0
-----
-+
-[WARNING]
-====
-Passwords specified on the kernel command line are visible for all users via the file _/proc/cmdline_ and via dmesg or can be sniffed on the network, when using DHCP with DHCP root-path.
-====
+--
 
-**root=**_???_ **netroot=**iscsi:[_<username>_:_<password>_[:_<reverse>_:_<password>_]@][_<servername>_]:[_<protocol>_]:[_<port>_][:[_<iscsi_iface_name>_]:[_<netdev_name>_]]:[_<LUN>_]:_<targetname>_ ...::
-    multiple netroot options allow setting up multiple iscsi disks. e.g.:
+**root=**__???__ **netroot=**iscsi:[__<username>__:__<password>__[:__<reverse>__:__<password>__]@][__<servername>__]:[__<protocol>__]:[__<port>__][:[__<iscsi_iface_name>__]:[__<netdev_name>__]]:[__<LUN>__]:__<targetname>__ ...::
+    multiple netroot options allow setting up multiple iscsi disks:
 +
-----
+[listing]
+.Example
+--
 root=UUID=12424547
 netroot=iscsi:192.168.50.1::::iqn.2009-06.dracut:target0
 netroot=iscsi:192.168.50.1::::iqn.2009-06.dracut:target1
-----
+--
 +
-If servername is an IPv6 address, it has to be put in brackets. e.g.:
+If servername is an IPv6 address, it has to be put in brackets:
 +
-----
+[listing]
+.Example
+--
 netroot=iscsi:[2001:DB8::1]::::iqn.2009-06.dracut:target0
-----
+--
 +
-[WARNING]
-====
-Passwords specified on the kernel command line are visible for all users via the file _/proc/cmdline_ and via dmesg or can be sniffed on the network, when using DHCP with DHCP root-path. You may want to use rd.iscsi.firmware.
-====
+WARNING: Passwords specified on the kernel command line are visible for all users via the file _/proc/cmdline_ and via dmesg or can be sniffed on the network, when using DHCP with DHCP root-path. You may want to use rd.iscsi.firmware.
 
-**root=**_???_ **rd.iscsi.initiator=**_<initiator>_ **rd.iscsi.target.name=**_<target name>_  **rd.iscsi.target.ip=**_<target ip>_ **rd.iscsi.target.port=**_<target port>_ **rd.iscsi.target.group=**_<target group>_ **rd.iscsi.username=**_<username>_ **rd.iscsi.password=**_<password>_ **rd.iscsi.in.username=**_<in username>_ **rd.iscsi.in.password=**_<in password>_::
+**root=**__???__ **rd.iscsi.initiator=**__<initiator>__ **rd.iscsi.target.name=**__<target name>__  **rd.iscsi.target.ip=**__<target ip>__ **rd.iscsi.target.port=**__<target port>__ **rd.iscsi.target.group=**__<target group>__ **rd.iscsi.username=**__<username>__ **rd.iscsi.password=**__<password>__ **rd.iscsi.in.username=**__<in username>__ **rd.iscsi.in.password=**__<in password>__::
     manually specify all iscsistart parameter (see **+iscsistart --help+**)
 +
-[WARNING]
-====
-Passwords specified on the kernel command line are visible for all users via the file _/proc/cmdline_ and via dmesg or can be sniffed on the network, when using DHCP with DHCP root-path. You may want to use rd.iscsi.firmware.
-====
+WARNING: Passwords specified on the kernel command line are visible for all users via the file _/proc/cmdline_ and via dmesg or can be sniffed on the network, when using DHCP with DHCP root-path. You may want to use rd.iscsi.firmware.
 
 **root=**_???_ **netroot=**iscsi **rd.iscsi.firmware=1**::
  will read the iscsi parameter from the BIOS firmware
 
-**rd.iscsi.param=**_<param>_::
+**rd.iscsi.param=**__<param>__::
     <param> will be passed as "--param <param>" to iscsistart.
     This parameter can be specified multiple times.
-    e.g.:
 +
-----
+[listing]
+.Example
+--
 "netroot=iscsi rd.iscsi.firmware=1 rd.iscsi.param=node.session.timeo.replacement_timeout=30"
-----
+--
 +
 will result in
 +
-----
+[listing]
+--
 iscsistart -b --param node.session.timeo.replacement_timeout=30
-----
+--
 
 FCoE
 ~~~~
-**fcoe=**_<edd|interface|MAC>_:_{dcb|nodcb}_::
+**fcoe=**__<edd|interface|MAC>__:__{dcb|nodcb}__::
     Try to connect to a FCoE SAN through the NIC specified by _<interface>_ or
     _<MAC>_ or EDD settings. For the second argument, currently only nodcb is
     supported. This parameter can be specified multiple times.
 +
-[NOTE]
-letters in the MAC-address must be lowercase!
+NOTE: letters in the MAC-address must be lowercase!
 
 NBD
 ~~~
-**root=**??? **netroot=**nbd:_<server>_:_<port>_[:_<fstype>_[:_<mountopts>_[:_<nbdopts>_]]]::
+**root=**??? **netroot=**nbd:__<server>__:__<port>__[:__<fstype>__[:__<mountopts>__[:__<nbdopts>__]]]::
     mount nbd share from <server>
 
-**root=dhcp** with **dhcp** **root-path=**nbd:_<server>_:_<port>_[:_<fstype>_[:_<mountopts>_[:_<nbdopts>_]]]::
+**root=dhcp** with **dhcp** **root-path=**nbd:__<server>__:__<port>__[:__<fstype>__[:__<mountopts>__[:__<nbdopts>__]]]::
     root=dhcp alone directs initrd to look at the DHCP root-path where NBD
     options can be specified. This syntax is only usable in cases where you are
     directly mounting the volume as the rootfs.
@@ -593,25 +641,29 @@ DASD
 
 ZFCP
 ~~~~
-**rd.zfcp=**_<zfcp adaptor device bus ID>_,_<WWPN>_,_<FCPLUN>_::
-    rd.zfcp can be specified multiple times on the kernel command line. e.g.: 
+**rd.zfcp=**__<zfcp adaptor device bus ID>__,__<WWPN>__,__<FCPLUN>__::
+    rd.zfcp can be specified multiple times on the kernel command line.
 +
-----
+[listing]
+.Example
+--
 rd.zfcp=0.0.4000,0x5005076300C213e9,0x5022000000000000
-----
+--
 
 **rd.zfcp.conf=0**::
     ignore zfcp.conf included in the initramfs
 
 ZNET
 ~~~~
-**rd.znet=**_<nettype>_,_<subchannels>_,_<options>_::
-    rd.znet can be specified multiple times on the kernel command line. e.g.: 
+**rd.znet=**__<nettype>__,__<subchannels>__,__<options>__::
+    rd.znet can be specified multiple times on the kernel command line.
 +
-----
+[listing]
+.Example
+--
 rd.znet=qeth,0.0.0600,0.0.0601,0.0.0602,layer2=1,portname=foo
 rd.znet=ctc,0.0.0600,0.0.0601,protocol=bar
-----
+--
 
 Plymouth Boot Splash
 ~~~~~~~~~~~~~~~~~~~~
@@ -623,33 +675,41 @@ Plymouth Boot Splash
 
 Kernel keys
 ~~~~~~~~~~~
-**masterkey=**_<kernel master key path name>_::
-    Set the path name of the kernel master key. e.g.: 
+**masterkey=**__<kernel master key path name>__::
+    Set the path name of the kernel master key.
 +
-----
+[listing]
+.Example
+--
 masterkey=/etc/keys/kmk-trusted.blob
-----
+--
 
-**masterkeytype=**_<kernel master key type>_::
-    Set the type of the kernel master key. e.g.: 
+**masterkeytype=**__<kernel master key type>__::
+    Set the type of the kernel master key.
 +
-----
+[listing]
+.Example
+--
 masterkeytype=trusted
-----
+--
 
-**evmkey=**_<EVM key path name>_::
-    Set the path name of the EVM key. e.g.: 
+**evmkey=**__<EVM key path name>__::
+    Set the path name of the EVM key.
 +
-----
+[listing]
+.Example
+--
 evmkey=/etc/keys/evm-trusted.blob
-----
+--
 
-**ecryptfskey=**_<eCryptfs key path name>_::
-    Set the path name of the eCryptfs key. e.g.: 
+**ecryptfskey=**__<eCryptfs key path name>__::
+    Set the path name of the eCryptfs key.
 +
-----
+[listing]
+.Example
+--
 ecryptfskey=/etc/keys/ecryptfs-trusted.blob
-----
+--
 
 Deprecated, renamed Options
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
diff --git a/dracut.css b/dracut.css
index e419a067..357ede1b 100644
--- a/dracut.css
+++ b/dracut.css
@@ -14,45 +14,6 @@ body {
 	color:black;
 }
 
-body.toc_embeded {
-	/*for web hosting system only*/
-	margin-left: 300px;
-}
-
-object.toc, iframe.toc {
-	/*for web hosting system only*/
-	border-style:none;
-	position:fixed;
-	width:290px;
-	height:99.99%;
-	top:0;
-	left:0;
-	z-index: 100;
-	border-style:none;
-	border-right:1px solid #999;
-}
-
-/* Hide web menu */
-
-body.notoc {
-	margin-left: 3em;
-}
-
-iframe.notoc {
-	border-style:none;
-	border: none;
-	padding: 0em;
-	position:fixed;
-	width: 21px;
-	height: 29px;
-	top: 0px;
-	left:0;
-	overflow: hidden;
-	margin: 0em;
-	margin-left: -3px;
-}
-/* End hide web menu */
-
 /* desktop styles */
 body.desktop {
 	margin-left: 26em;
@@ -166,7 +127,6 @@ h1 {
 	margin-bottom: 0em;
 	font-size: 3.0em;
 	font-weight: bold;
-	background: #003d6e url(../images/h1-bg.png) top left repeat-x;
 	color: white;
 	text-align: center;
 	padding: 0.7em;
@@ -480,106 +440,14 @@ h3.author {
 	font-weight:bold;
 }
 
-/* inline syntax highlighting */
-.perl_Alert {
-	color: #0000ff;
-}
-
-.perl_BaseN {
-	color: #007f00;
-}
-
-.perl_BString {
-	color: #5C3566;
-}
-
-.perl_Char {
-	color: #ff00ff;
-}
-
-.perl_Comment {
-	color: #FF00FF;
-}
-
-
-.perl_DataType {
-	color: #0000ff;
-}
-
-
-.perl_DecVal {
-	color: #00007f;
-}
-
-
-.perl_Error {
-	color: #ff0000;
-}
-
-
-.perl_Float {
-	color: #00007f;
-}
-
-
-.perl_Function {
-	color: #007f00;
-}
-
-
-.perl_IString {
-	color: #5C3566;
-}
-
-
-.perl_Keyword {
-	color: #002F5D;
-}
-
-
-.perl_Operator {
-	color: #ffa500;
-}
-
-
-.perl_Others {
-	color: #b03060;
-}
-
-
-.perl_RegionMarker {
-	color: #96b9ff;
-}
-
-
-.perl_Reserved {
-	color: #9b30ff;
-}
-
-
-.perl_String {
-	color: #5C3566;
-}
-
-
-.perl_Variable {
-	color: #0000ff;
-}
-
-
-.perl_Warning {
-	color: #0000ff;
-}
 
 /*Lists*/
 ul {
 	padding-left:1.6em;
-	list-style-image:url(../images/dot.png);
 	list-style-type: circle;
 }
 
 ul ul {
-	list-style-image:url(../images/dot2.png);
 	list-style-type: circle;
 }
 
@@ -769,21 +637,6 @@ code {
 	word-wrap: break-word; /* Internet Explorer 5.5+ */
 }
 
-/*Notifications*/
-div.warning:before {
-	content:url(../images/warning.png);
-	padding-left: 5px;
-}
-
-div.note:before {
-	content:url(../images/note.png);
-	padding-left: 5px;
-}
-
-div.important:before {
-	content:url(../images/important.png);
-	padding-left: 5px;
-}
 
 div.warning, div.note, div.important {
 	color: black;
@@ -792,7 +645,8 @@ div.warning, div.note, div.important {
 	background: none;
 	background-color: white;
 	margin-bottom: 1em;
-	border-bottom: 1px solid #aaaaaa;
+	padding-left: 1em;
+	border-left: 2px solid #aaaaaa;
 }
 
 div.warning h2, div.note h2,div.important h2 {
@@ -817,20 +671,6 @@ div.admonition_header {
 	font-size: 1.0em;
 }
 
-div.warning div.admonition_header {
-	background: url(../images/red.png) top left repeat-x;
-	background-color: #590000;
-}
-
-div.note div.admonition_header {
-	background: url(../images/green.png) top right repeat-x;
-	background-color: #597800;
-}
-
-div.important div.admonition_header {
-	background: url(../images/yellow.png) top right repeat-x;
-	background-color: #a6710f;
-}
 
 div.warning p, div.warning div.para,
 div.note p, div.note div.para,
@@ -1131,266 +971,6 @@ ul li p:last-child, ul li div.para:last-child {
 	padding-bottom:0em;
 }
 
-/*document navigation*/
-.docnav a, .docnav strong {
-	border:none;
-	text-decoration:none;
-	font-weight:normal;
-}
-
-.docnav {
-	list-style:none;
-	margin:0em;
-	padding:0em;
-	position:relative;
-	width:100%;
-	padding-bottom:2em;
-	padding-top:1em;
-	border-top:1px dotted #ccc;
-}
-
-.docnav li {
-	list-style:none;
-	margin:0em;
-	padding:0em;
-	display:inline;
-	font-size:.8em;
-}
-
-.docnav li:before {
-	content:" ";
-}
-
-.docnav li.previous, .docnav li.next {
-	position:absolute;
-	top:1em;
-}
-
-.docnav li.up, .docnav li.home {
-	margin:0em 1.5em;
-}
-
-.docnav li.previous {
-	left:0px;
-	text-align:left;
-}
-
-.docnav li.next {
-	right:0px;
-	text-align:right;
-}
-
-.docnav li.previous strong, .docnav li.next strong {
-	height:22px;
-	display:block;
-}
-
-.docnav {
-	margin:0 auto;
-	text-align:center;
-}
-
-.docnav li.next a strong {
-	background:  url(../images/stock-go-forward.png) top right no-repeat;
-	padding-top:3px;
-	padding-bottom:4px;
-	padding-right:28px;
-	font-size:1.2em;
-}
-
-.docnav li.previous a strong {
-	background: url(../images/stock-go-back.png) top left no-repeat;
-	padding-top:3px;
-	padding-bottom:4px;
-	padding-left:28px;
-	padding-right:0.5em;
-	font-size:1.2em;
-}
-
-.docnav li.home a strong {
-	background: url(../images/stock-home.png) top left no-repeat;
-	padding:5px;
-	padding-left:28px;
-	font-size:1.2em;
-}
-
-.docnav li.up a strong {
-	background: url(../images/stock-go-up.png) top left no-repeat;
-	padding:5px;
-	padding-left:28px;
-	font-size:1.2em;
-}
-
-.docnav a:link, .docnav a:visited {
-	color:#666;
-}
-
-.docnav a:hover, .docnav a:focus, .docnav a:active {
-	color:black;
-}
-
-.docnav a {
-	max-width: 10em;
-	overflow:hidden;
-}
-
-.docnav a:link strong {
-	text-decoration:none;
-}
-
-.docnav {
-	margin:0 auto;
-	text-align:center;
-}
-
-ul.docnav {
-	margin-bottom: 1em;
-}
-/* Reports */
-.reports ul {
-	list-style:none;
-	margin:0em;
-	padding:0em;
-}
-
-.reports li{
-	margin:0em;
-	padding:0em;
-}
-
-.reports li.odd {
-	background-color: #eeeeee;
-	margin:0em;
-	padding:0em;
-}
-
-.reports dl {
-	display:inline;
-	margin:0em;
-	padding:0em;
-	float:right;
-	margin-right: 17em;
-	margin-top:-1.3em;
-}
-
-.reports dt {
-	display:inline;
-	margin:0em;
-	padding:0em;
-}
-
-.reports dd {
-	display:inline;
-	margin:0em;
-	padding:0em;
-	padding-right:.5em;
-}
-
-.reports h2, .reports h3{
-	display:inline;
-	padding-right:.5em;
-	font-size:10pt;
-	font-weight:normal;
-}
-
-.reports div.progress {
-	display:inline;
-	float:right;
-	width:16em;
-	background:#c00 url(../images/shine.png) top left repeat-x;
-	margin:0em;
-	margin-top:-1.3em;
-	padding:0em;
-	border:none;
-}
-
-/*uniform*/
-body.results, body.reports {
-	max-width:57em ;
-	padding:0em;
-}
-
-/*Progress Bar*/
-div.progress {
-	display:block;
-	float:left;
-	width:16em;
-	background:#c00 url(../images/shine.png) top left repeat-x;
-	height:1em;
-}
-
-div.progress span {
-	height:1em;
-	float:left;
-}
-
-div.progress span.translated {
-	background:#6c3 url(../images/shine.png) top left repeat-x;
-}
-
-div.progress span.fuzzy {
-	background:#ff9f00 url(../images/shine.png) top left repeat-x;
-}
-
-
-/*Results*/
-
-.results ul {
-	list-style:none;
-	margin:0em;
-	padding:0em;
-}
-
-.results li{
-	margin:0em;
-	padding:0em;
-}
-
-.results li.odd {
-	background-color: #eeeeee;
-	margin:0em;
-	padding:0em;
-}
-
-.results dl {
-	display:inline;
-	margin:0em;
-	padding:0em;
-	float:right;
-	margin-right: 17em;
-	margin-top:-1.3em;
-}
-
-.results dt {
-	display:inline;
-	margin:0em;
-	padding:0em;
-}
-
-.results dd {
-	display:inline;
-	margin:0em;
-	padding:0em;
-	padding-right:.5em;
-}
-
-.results h2, .results h3 {
-	display:inline;
-	padding-right:.5em;
-	font-size:10pt;
-	font-weight:normal;
-}
-
-.results div.progress {
-	display:inline;
-	float:right;
-	width:16em;
-	background:#c00 url(../images/shine.png) top left repeat-x;
-	margin:0em;
-	margin-top:-1.3em;
-	padding:0em;
-	border:none;
-}
 
 /* Dirty EVIL Mozilla hack for round corners */
 pre {
@@ -1423,12 +1003,6 @@ span.remark {
 	background-color: #ff00ff;
 }
 
-.draft {
-	background-image: url(../images/watermark-draft.png);
-	background-repeat: repeat-y;
-        background-position: center;
-}
-
 .foreignphrase {
 	font-style: inherit;
 }
@@ -1513,10 +1087,6 @@ h1 {
 	color:#3c6eb4
 }
 
-.producttitle {
-	background: #3c6eb4 url(../images/h1-bg.png) top left repeat;
-}
-
 .section h1.title {
 	color:#3c6eb4;
 }
diff --git a/dracut.modules.7.asc b/dracut.modules.7.asc
new file mode 100644
index 00000000..4cb2aa15
--- /dev/null
+++ b/dracut.modules.7.asc
@@ -0,0 +1,293 @@
+DRACUT.MODULES(7)
+=================
+:doctype: manpage
+:man source:   dracut
+:man manual:   dracut
+
+NAME
+----
+dracut.modules - dracut modules
+
+DESCRIPTION
+-----------
+== dracut Components
+
+dracut uses a modular system to build and extend the initramfs image. All
+modules are located in _/usr/lib/dracut/modules.d_ or in _<git-src>/modules.d_.
+The most basic dracut module is _99base_. In _99base_ the initial shell script
+init is defined, which gets run by the kernel after initramfs loading. Although
+you can replace init with your own version of _99base_, this is not encouraged.
+Instead you should use, if possible, the hooks of dracut. All hooks, and the
+point of time in which they are executed, are described in <<stages>>.
+
+The main script, which creates the initramfs is dracut itsself. It parses all
+arguments and sets up the directory, in which everything is installed. It then
+executes all check, install, installkernel scripts found in the modules, which
+are to be processed. After everything is installed, the install directory is
+archived and compressed to the final initramfs image. All helper functions used
+by check, install and installkernel are found in in the file _dracut-functions_.
+These shell functions are available to all module installer (install,
+installkernel) scripts, without the need to source _dracut-functions_.
+
+A module can check the preconditions for install and installkernel with the
+check script. Also dependencies can be expressed with check. If a module passed
+check, install and installkernel will be called to install all of the necessary
+files for the module. To split between kernel and non-kernel parts of the
+installation, all kernel module related parts have to be in installkernel. All
+other files found in a module directory are module specific and mostly are hook
+scripts and udev rules.
+
+
+[[stages]]
+== Boot Process Stages
+
+dracut modules can insert custom script at various points, to control the boot
+process.
+These hooks are plain directories containing shell scripts ending with ".sh",
+which are sourced by init.
+Common used functions are in _dracut-lib.sh_, which can be sourced by any script.
+
+=== Hook: cmdline
+
+The _cmdline_ hook is a place to insert scripts to parse the kernel command line
+and prepare the later actions, like setting up udev rules and configuration
+files.
+
+In this hook the most important environment variable is defined: root. The
+second one is rootok, which indicates, that a module claimed to be able to parse
+the root defined. So for example, **root=**__iscsi:....__ will be claimed by the
+iscsi dracut module, which then sets rootok.
+
+=== Hook: pre-udev
+
+This hook is executed right after the cmdline hook and a check if root and
+rootok were set. Here modules can take action with the final root, and before
+udev has been run.
+
+=== Start Udev
+
+Now udev is started and the logging for udev is setup.
+
+=== Hook: pre-trigger
+
+In this hook, you can set udev environment variables with **udevadm control
+--property=KEY=_value_** or control the further execution of udev with
+udevadm.
+
+=== Trigger Udev
+
+udev is triggered by calling udevadm trigger, which sends add events for all
+devices and subsystems.
+
+=== Main Loop
+
+In the main loop of dracut loops until udev has settled and
+all scripts in _initqueue/finished_ returned true.
+In this loop there are three hooks, where scripts can be inserted
+by calling /sbin/initqueue.
+
+==== Initqueue
+
+This hook gets executed every time a script is inserted here, regardless of the
+udev state.
+
+==== Initqueue settled
+
+This hooks (initqueue/settled) gets executed every time udev has settled.
+
+==== Initqueue timeout
+
+This hooks (initqueue/timeout) gets executed, when the main loop counter becomes half of the
+rd.retry counter.
+
+==== Initqueue finished
+
+This hook (initqueue/finished) is called after udev has settled and
+if all scripts herein return 0 the main loop will be ended.
+Abritary scripts can be added here, to loop in the
+initqueue until something happens, which a dracut module wants to wait for.
+
+=== Hook: pre-mount
+
+Before the root device is mounted all scripts in the hook pre-mount are
+executed. In some cases (e.g. NFS) the real root device is already mounted,
+though.
+
+=== Hook: mount
+
+This hook is mainly to mount the real root device.
+
+=== Hook: pre-pivot
+
+This hook is called before cleanup hook, This is a good place for
+actions other than cleanups which need to be called before pivot.
+
+=== Hook: cleanup
+
+This hook is the last hook and is called before init finally switches root to
+the real root device. This is a good place to clean up and kill processes not
+needed anymore.
+
+
+=== Cleanup and switch_root
+
+Init (or systemd) kills all udev processes, cleans up the environment,
+sets up the arguments for the real init process and finally calls switch_root.
+switch_root removes the whole filesystem hierarchy of the initramfs,
+chroot()s to the real root device and calls /sbin/init with the specified arguments.
+
+To ensure all files in the initramfs hierarchy can be removed, all processes
+still running from the initramfs should not have any open file descriptors left.
+
+== Network Infrastructure
+
+FIXME
+
+== Writing a Module
+
+A simple example module is _96insmodpost_, which modprobes a kernel module after
+udev has settled and the basic device drivers have been loaded.
+
+All module installation information is in the file module-setup.sh.
+
+First we create a check() function, which just exits with 0 indicating that this
+module should be included by default.
+
+check():
+----
+return 0
+----
+
+The we create the install() function, which installs a cmdline hook with
+priority number 20 called _parse-insmodpost.sh_. It also installs the
+_insmodpost.sh_ script in _/sbin_.
+
+install():
+----
+inst_hook cmdline 20 "$moddir/parse-insmodpost.sh"
+inst_simple "$moddir/insmodpost.sh" /sbin/insmodpost.sh
+----
+
+The _pase-instmodpost.sh_ parses the kernel command line for a argument
+rd.driver.post, blacklists the module from being autoloaded and installs the
+hook _insmodpost.sh_ in the _initqueue/settled_.
+
+_parse-insmodpost.sh_:
+----
+for p in $(getargs rd.driver.post=); do
+    echo "blacklist $p" >> /etc/modprobe.d/initramfsblacklist.conf
+    _do_insmodpost=1
+done
+
+[ -n "$_do_insmodpost" ] && /sbin/initqueue --settled --unique --onetime /sbin/insmodpost.sh
+unset _do_insmodpost
+
+----
+
+_insmodpost.sh_, which is called in the _initqueue/settled_ hook will just
+modprobe the kernel modules specified in all rd.driver.post kernel command line
+parameters. It runs after udev has settled and is only called once (--onetime).
+
+_insmodpost.sh_:
+----
+. /lib/dracut-lib.sh
+
+for p in $(getargs rd.driver.post=); do
+    modprobe $p
+done
+
+----
+
+
+=== module-setup.sh: check()
+
+_check()_ is called by dracut to evaluate the inclusion of a dracut module in
+the initramfs.
+
+$hostonly:: If the $hostonly variable is set, then the module check() function
+should be in "hostonly" mode, which means, that the check() should only return
+0, if the module is really needed to boot this specific host.
+
+check() should return with:
+
+0:: Include the dracut module in the initramfs.
+
+1:: Do not include the dracut module. The requirements are not fullfilled
+(missing tools, etc.)
+
+255:: Only include the dracut module, if another module requires it or if
+explicitly specified in the config file or on the argument list.
+
+
+=== module-setup.sh: depends()
+
+The function depends() should echo all other dracut module names the module
+depends on.
+
+=== module-setup.sh: cmdline()
+
+This function should print the kernel command line options needed to boot the current
+machine setup. It should start with a space and should not print a newline.
+
+=== module-setup.sh: install()
+
+The install() function is called to install everything non-kernel related. To install
+binaries, scripts, and other files, you can use the functions mentioned in <<creation>>.
+
+To address a file in the current module directory, use the variable "$moddir".
+
+=== module-setup.sh: installkernel()
+
+In installkernel() all kernel related files should be installed. You can use all of the functions
+mentioned in <<creation>> to install files.
+
+=== [[creation]]Creation Functions
+
+==== inst_multiple [-o] <file> [ <file> ...]
+
+installs multiple binaries and files. If executables are specified without a path, dracut
+will search the path PATH=/usr/sbin:/sbin:/usr/bin:/bin for the binary. If the option "-o"
+is given as the first parameter, a missing file does not lead to an error.
+
+==== inst <src> [<dst>]
+
+installs _one_ file <src> either to the same place in the initramfs or to an optional <dst>.
+
+==== inst_hook <hookdir> <prio> <src>
+
+installs an executable/script <src> in the dracut hook <hookdir> with priority <prio>.
+
+==== inst_rules <udevrule> [ <udevrule> ...]
+
+installs one ore more udev rules. Non-existant udev rules are reported, but do not let dracut fail.
+
+==== instmods <kernelmodule> [ <kernelmodule> ... ]
+
+instmods should be used only in the installkernel() function.
+
+instmods installs one or more kernel modules in the initramfs. <kernelmodule> can also be a whole
+subsystem, if prefixed with a "=", like "=drivers/net/team".
+
+instmods will not install the kernel module, if $hostonly is set and the kernel module is not currently
+needed by any /sys/*...*/uevent MODALIAS.
+To install a kernel module regardless of the hostonly mode use the form:
+----
+hostonly='' instmods <kernelmodule>
+----
+
+=== Initramfs Functions
+
+FIXME
+
+
+=== Network Modules
+
+FIXME
+
+AUTHOR
+------
+Harald Hoyer
+
+SEE ALSO
+--------
+*dracut*(8)
diff --git a/dracut.spec b/dracut.spec
index b1cf9fef..8dfc7535 100644
--- a/dracut.spec
+++ b/dracut.spec
@@ -316,6 +316,7 @@ rm -rf -- $RPM_BUILD_ROOT
 %endif
 %{_mandir}/man7/dracut.kernel.7*
 %{_mandir}/man7/dracut.cmdline.7*
+%{_mandir}/man7/dracut.modules.7*
 %{_mandir}/man7/dracut.bootup.7*
 %{_mandir}/man5/dracut.conf.5*
 %if %{defined _unitdir}
diff --git a/dracut.usage.asc b/dracut.usage.asc
new file mode 100644
index 00000000..6d37920f
--- /dev/null
+++ b/dracut.usage.asc
@@ -0,0 +1,526 @@
+To create a initramfs image, the most simple command is:
+----
+# dracut
+----
+
+This will generate a general purpose initramfs image, with all possible
+functionality resulting of the combination of the installed dracut modules and
+system tools. The image is /boot/initramfs-_++<kernel version>++_.img and
+contains the kernel modules of the currently active kernel with version
+_++<kernel version>++_.
+
+If the initramfs image already exists, dracut will display an error message, and
+to overwrite the existing image, you have to use the --force option.
+----
+# dracut --force
+----
+
+If you want to specify another filename for the resulting image you would issue
+a command like:
+----
+# dracut foobar.img
+----
+
+To generate an image for a specific kernel version, the command would be:
+----
+# dracut foobar.img 2.6.40-1.rc5.f20
+----
+
+A shortcut to generate the image at the default location for a specific kernel
+version is:
+----
+# dracut --kver 2.6.40-1.rc5.f20
+----
+
+If you want to create lighter, smaller initramfs images, you may want to specify
+the --hostonly or -H option. Using this option, the resulting image will
+contain only those dracut modules, kernel modules and filesystems, which are
+needed to boot this specific machine. This has the drawback, that you can't put
+the disk on another controller or machine, and that you can't switch to another
+root filesystem, without recreating the initramfs image. The usage of the
+--hostonly option is only for experts and you will have to keep the broken
+pieces. At least keep a copy of a general purpose image (and corresponding
+kernel) as a fallback to rescue your system.
+
+=== Inspecting the Contents
+To see the contents of the image created by dracut, you can use the lsinitrd tool.
+----
+# lsinitrd | less
+----
+
+To display the contents of a file in the initramfs also use the lsinitrd tool:
+----
+# lsinitrd -f /etc/ld.so.conf
+include ld.so.conf.d/*.conf
+----
+
+=== Adding dracut Modules
+Some dracut modules are turned off by default and have to be activated manually.
+You can do this by adding the dracut modules to the configuration file
+_/etc/dracut.conf_ or _/etc/dracut.conf.d/myconf.conf_. See *dracut.conf*(5).
+You can also add dracut modules on the command line
+by using the -a or --add option:
+----
+# dracut --add bootchart initramfs-bootchart.img
+----
+
+To see a list of available dracut modules, use the --list-modules option:
+----
+# dracut --list-modules
+----
+
+=== Omitting dracut Modules
+Sometimes you don't want a dracut module to be included for reasons of speed,
+size or functionality. To do this, either specify the omit_dracutmodules
+variable in the _dracut.conf_ or _/etc/dracut.conf.d/myconf.conf_ configuration
+file (see *dracut.conf*(5)), or use the -o or --omit option
+on the command line:
+----
+# dracut -o "multipath lvm" no-multipath-lvm.img
+----
+
+=== Adding Kernel Modules
+If you need a special kernel module in the initramfs, which is not
+automatically picked up by dracut, you have the use the --add-drivers option
+on the command line or  the drivers vaiable in  the _/etc/dracut.conf_
+or _/etc/dracut.conf.d/myconf.conf_ configuration file (see *dracut.conf*(5)):
+----
+# dracut --add-drivers mymod initramfs-with-mymod.img
+----
+
+=== Boot parameters
+An initramfs generated without the "hostonly" mode, does not contain any system
+configuration files (except for some special exceptions), so the configuration
+has to be done on the kernel command line. With this flexibility, you can easily
+boot from a changed root partition, without the need to recompile the initramfs
+image. So, you could completly change your root partition (move it inside a md
+raid with encryption and LVM on top), as long as you specify the correct
+filesystem LABEL or UUID on the kernel command line for your root device, dracut
+will find it and boot from it.
+
+The kernel command line usually can be configured in _/boot/grub/grub.conf_, if
+grub is your bootloader and it also can be edited in the real boot process in
+the grub menu.
+
+The kernel command line can also be provided by the dhcp server with the
+root-path option. See <<NetworkBoot>>.
+
+For a full reference of all kernel command line parameters, see *dracut.cmdline*(5).
+
+To get a quick start for the suitable kernel command line on your system, use the
+__--print-cmdline__ option:
+----
+# dracut --print-cmdline
+ root=UUID=8b8b6f91-95c7-4da2-831b-171e12179081 rootflags=rw,relatime,discard,data=ordered rootfstype=ext4
+----
+
+==== Specifying the root Device
+This is the only option dracut really needs to boot from your root partition.
+Because your root partition can live in various environments, there are a lot of
+formats for the root= option. The most basic one is root=_++<path to device
+node>++_:
+----
+root=/dev/sda2
+----
+
+Because device node names can change, dependent on the drive ordering, you are
+encouraged to use the filesystem identifier (UUID) or filesystem label (LABEL)
+to specify your root partition:
+----
+root=UUID=19e9dda3-5a38-484d-a9b0-fa6b067d0331
+----
+
+or
+
+----
+root=LABEL=myrootpartitionlabel
+----
+
+To see all UUIDs or LABELs on your system, do:
+----
+# ls -l /dev/disk/by-uuid
+----
+
+or
+
+----
+# ls -l /dev/disk/by-label
+----
+
+If your root partition is on the network see <<NetworkBoot>>.
+
+==== Keyboard Settings
+If you have to input passwords for encrypted disk volumes, you might want to set
+the keyboard layout and specify a display font.
+
+A typical german kernel command would contain:
+----
+rd.vconsole.font=latarcyrheb-sun16 rd.vconsole.keymap=de-latin1-nodeadkeys rd.locale.LANG=de_DE.UTF-8
+----
+
+Setting these options can override the setting stored on your system, if you use
+a modern init system, like systemd.
+
+==== Blacklisting Kernel Modules
+Sometimes it is required to prevent the automatic kernel module loading of a
+specific kernel module. To do this, just add rd.blacklist=_++<kernel module
+name>++_, with _++<kernel module name>++_ not containing the _.ko_
+suffix, to the kernel command line. For example:
+----
+rd.driver.blacklist=mptsas rd.driver.blacklist=nouveau
+----
+
+The option can be specified multiple times on the kernel command line.
+
+==== Speeding up the Boot Process
+If you want to speed up the boot process, you can specify as much information
+for dracut on the kernel command as possible. For example, you can tell dracut,
+that you root partition is not on a LVM volume or not on a raid partition, or
+that it lives inside a specific crypto LUKS encrypted volume. By default, dracut
+searches everywhere. A typical dracut kernel command line for a plain primary or
+logical partition would contain:
+----
+rd.luks=0 rd.lvm=0 rd.md=0 rd.dm=0
+----
+
+This turns off every automatic assembly of LVM, MD raids, DM raids and crypto LUKS.
+
+Of course, you could also omit the dracut modules in the initramfs creation
+process, but then you would lose the posibility to turn it on on demand.
+
+
+[[Injecting]]
+=== Injecting custom Files
+To add your own files to the initramfs image, you have several possibilities.
+
+The --include option let you specify a source path and a target path. For example
+----
+# dracut --include cmdline-preset /etc/cmdline.d/mycmdline.conf initramfs-cmdline-pre.img
+----
+will create an initramfs image, where the file cmdline-preset will be copied
+inside the initramfs to _/etc/cmdline.d/mycmdline.conf_. --include can only be specified once.
+
+
+----
+# mkdir -p rd.live.overlay/etc/cmdline.d
+# mkdir -p rd.live.overlay/etc/conf.d
+# echo "ip=auto" >> rd.live.overlay/etc/cmdline.d/mycmdline.conf
+# echo export FOO=testtest >> rd.live.overlay/etc/conf.d/testvar.conf
+# echo export BAR=testtest >> rd.live.overlay/etc/conf.d/testvar.conf
+# tree rd.live.overlay/
+rd.live.overlay/
+`-- etc
+    |-- cmdline.d
+    |   `-- mycmdline.conf
+    `-- conf.d
+        `-- testvar.conf
+
+# dracut --include rd.live.overlay / initramfs-rd.live.overlay.img
+----
+
+This will put the contents of the rd.live.overlay directory into the root of the
+initramfs image.
+
+The --install option let you specify several files, which will get installed in
+the initramfs image at the same location, as they are present on initramfs
+creation time.
+
+
+----
+# dracut --install 'strace fsck.ext3 ssh' initramfs-dbg.img
+----
+
+This will create an initramfs with the strace, fsck.ext3 and ssh executables,
+together with the libraries needed to start those. The --install option can be
+specified multiple times.
+
+
+[[NetworkBoot]]
+=== Network Boot
+
+If your root partition is on a network drive, you have to have the network
+dracut modules installed to create a network aware initramfs image.
+
+On a Red Hat Enterprise Linux or Fedora system, this means, you have to install
+the _dracut-network_ rpm package:
+
+
+----
+# yum install dracut-network
+----
+
+The resulting initramfs image can be served by a boot manager residing on your
+local hard drive or it can be served by a PXE/TFTP server.
+
+How to setup your PXE/TFTP server can be found in the
+http://docs.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/[Red
+Hat Enterprise Linux Storage Administration Guide].
+
+If you specify ip=auto on the kernel command line, then dracut asks a dhcp
+server about the ip adress for the machine. The dhcp server can also serve an
+additional root-path, which will set the root device for dracut. With this
+mechanism, you have static configuration on your client machine and a
+centralized boot configuration on your TFTP/DHCP server. If you can't pass a
+kernel command line, then you can inject _/etc/cmdline.d/mycmdline.conf_, with a method described
+in <<Injecting>>.
+
+==== Reducing the Image Size
+
+To reduce the size of the initramfs, you should create it with by ommitting all
+dracut modules, which you know, you don't need to boot the machine.
+
+You can also specify the exact dracut and kernel modules to produce a very tiny
+initramfs image.
+
+For example for a NFS image, you would do:
+
+
+----
+# dracut -m "nfs network  base" initramfs-nfs-only.img
+----
+
+Then you would boot from this image with your target machine and reduce the size
+once more by creating it on the target machine with the --host-only option:
+
+
+----
+# dracut -m "nfs network base" --host-only initramfs-nfs-host-only.img
+----
+
+This will reduce the size of the initramfs image significantly.
+
+
+== Troubleshooting
+
+If the boot process does not succeed, you have several options to debug the
+situation. Some of the basic operations are covered here. For more information
+you should also visit:
+http://fedoraproject.org/wiki/How_to_debug_Dracut_problems
+
+
+[[identifying-your-problem-area]]
+=== Identifying your problem area
+. Remove ''rhgb'' and ''quiet'' from the kernel command line
+. Add ''rd.shell'' to the kernel command line. This will present a shell should
+dracut be unable to locate your root device
+. Add ''rd.shell rd.debug log_buf_len=1M'' to the kernel command line so that
+dracut shell commands are printed as they are executed
+. The file /run/initramfs/rdsosreport.txt is generated,
+which contains all the logs and the output of all significant tools, which are mentioned later.
+
+If you want to save that output, simply mount /boot by hand or insert an USB stick and mount that.
+Then you can store the output for later inspection.
+
+[[information-to-include-in-your-report]]
+=== Information to include in your report
+
+[[all-bug-reports]]
+==== All bug reports
+In all cases, the following should be mentioned and attached to your bug report:
+
+* The exact kernel command-line used. Typically from the bootloader
+configuration file (e.g. _/etc/grub.conf_) or from _/proc/cmdline_.
+* A copy of your disk partition information from _/etc/fstab_, which might be
+obtained booting an old working initramfs or a rescue medium.
+* Turn on dracut debugging (see _the 'debugging dracut' section_), and attach
+the file /run/initramfs/rdsosreport.txt.
+* If you use a dracut configuration file, please include _/etc/dracut.conf_ and
+all files in _/etc/dracut.conf.d/*.conf_
+
+[[network-root-device-related-problems]]
+==== Network root device related problems
+This section details information to include when experiencing problems on a
+system whose root device is located on a network attached volume (e.g. iSCSI,
+NFS or NBD). As well as the information from <<all-bug-reports>>, include the
+following information:
+
+
+* Please include the output of
++
+----
+# /sbin/ifup <interfacename>
+# ip addr show
+----
+
+[[debugging-dracut]]
+=== Debugging dracut
+
+
+[[configure-a-serial-console]]
+==== Configure a serial console
+
+Successfully debugging dracut will require some form of console
+logging during the system boot.  This section documents configuring a
+serial console connection to record boot messages.
+
+. First, enable serial console output for both the kernel and the bootloader.
+. Open the file _/etc/grub.conf_ for editing. Below the line ''timeout=5'', add
+the following:
++
+----
+serial --unit=0 --speed=9600
+terminal --timeout=5 serial console
+----
++
+. Also in _/etc/grub.conf_, add the following boot arguemnts to the ''kernel''
+line:
++
+----
+console=tty0 console=ttyS0,9600
+----
++
+. When finished, the _/etc/grub.conf_ file should look similar to the example
+below.
++
+----
+default=0
+timeout=5
+serial --unit=0 --speed=9600
+terminal --timeout=5 serial console
+title Fedora (2.6.29.5-191.fc11.x86_64)
+  root (hd0,0)
+  kernel /vmlinuz-2.6.29.5-191.fc11.x86_64 ro root=/dev/mapper/vg_uc1-lv_root console=tty0 console=ttyS0,9600
+  initrd /dracut-2.6.29.5-191.fc11.x86_64.img
+----
++
+. More detailed information on how to configure the kernel for console output
+can be found at
+http://www.faqs.org/docs/Linux-HOWTO/Remote-Serial-Console-HOWTO.html#CONFIGURE-KERNEL.
+. Redirecting non-interactive output
++
+--
+NOTE: You can redirect all non-interactive output to _/dev/kmsg_ and the kernel
+will put it out on the console when it reaches the kernel buffer by doing
+
+----
+# exec >/dev/kmsg 2>&1 </dev/console
+----
+--
+
+[[using-the-dracut-shell]]
+==== Using the dracut shell
+
+dracut offers a shell for interactive debugging in the event dracut fails to
+locate your root filesystem. To enable the shell:
+
+. Add the boot parameter ''rd.shell'' to your bootloader configuration file
+(e.g. _/etc/grub.conf_)
+. Remove the boot arguments ''rhgb'' and ''quiet''
++
+A sample _/etc/grub.conf_ bootloader configuration file is listed below.
++
+----
+default=0
+timeout=5
+serial --unit=0 --speed=9600
+terminal --timeout=5 serial console
+title Fedora (2.6.29.5-191.fc11.x86_64)
+  root (hd0,0)
+  kernel /vmlinuz-2.6.29.5-191.fc11.x86_64 ro root=/dev/mapper/vg_uc1-lv_root console=tty0 rd.shell
+  initrd /dracut-2.6.29.5-191.fc11.x86_64.img
+----
++
+. If system boot fails, you will be dropped into a shell as seen in the example below.
++
+----
+No root device found
+Dropping to debug shell.
+
+#
+----
++
+. Use this shell prompt to gather the information requested above (see <<all-bug-reports>>).
+
+[[accessing-the-root-volume-from-the-dracut-shell]]
+==== Accessing the root volume from the dracut shell
+From the dracut debug shell, you can manually perform the task of locating and
+preparing your root volume for boot. The required steps will depend on how your
+root volume is configured. Common scenarios include:
+
+* A block device (e.g. _/dev/sda7_)
+* A LVM logical volume (e.g. _/dev/VolGroup00/LogVol00_)
+* An encrypted device (e.g. _/dev/mapper/luks-4d5972ea-901c-4584-bd75-1da802417d83_)
+* A network attached device (e.g. netroot=iscsi:@192.168.0.4::3260::iqn.2009-02.org.fedoraproject:for.all)
+
+The exact method for locating and preparing will vary. However, to continue with
+a successful boot, the objective is to locate your root volume and create a
+symlink _/dev/root_ which points to the file system. For example, the following
+example demonstrates accessing and booting a root volume that is an encrypted
+LVM Logical volume.
+
+. Inspect your partitions using parted
++
+----
+# parted /dev/sda -s p
+Model: ATA HTS541060G9AT00 (scsi)
+Disk /dev/sda: 60.0GB
+Sector size (logical/physical): 512B/512B
+Partition Table: msdos
+Number  Start   End     Size    Type      File system  Flags
+1      32.3kB  10.8GB  107MB   primary   ext4         boot
+2      10.8GB  55.6GB  44.7GB  logical                lvm
+----
++
+. You recall that your root volume was a LVM logical volume. Scan and activate
+any logical volumes.
++
+----
+# lvm vgscan
+# lvm vgchange -ay
+----
++
+. You should see any logical volumes now using the command blkid:
++
+----
+# blkid
+/dev/sda1: UUID="3de247f3-5de4-4a44-afc5-1fe179750cf7" TYPE="ext4"
+/dev/sda2: UUID="Ek4dQw-cOtq-5MJu-OGRF-xz5k-O2l8-wdDj0I" TYPE="LVM2_member"
+/dev/mapper/linux-root: UUID="def0269e-424b-4752-acf3-1077bf96ad2c" TYPE="crypto_LUKS"
+/dev/mapper/linux-home: UUID="c69127c1-f153-4ea2-b58e-4cbfa9257c5e" TYPE="ext3"
+/dev/mapper/linux-swap: UUID="47b4d329-975c-4c08-b218-f9c9bf3635f1" TYPE="swap"
+----
++
+. From the output above, you recall that your root volume exists on an encrypted
+block device. Following the guidance disk encryption guidance from the
+Installation Guide, you unlock your encrypted root volume.
++
+----
+# UUID=$(cryptsetup luksUUID /dev/mapper/linux-root)
+# cryptsetup luksOpen /dev/mapper/linux-root luks-$UUID
+Enter passphrase for /dev/mapper/linux-root:
+Key slot 0 unlocked.
+----
++
+. Next, make a symbolic link to the unlocked root volume
++
+----
+# ln -s /dev/mapper/luks-$UUID /dev/root
+----
++
+. With the root volume available, you may continue booting the system by exiting
+the dracut shell
++
+----
+# exit
+----
+
+[[additional-dracut-boot-parameters]]
+==== Additional dracut boot parameters
+For more debugging options, see *dracut.cmdline*(7).
+
+
+[[debugging-dracut-on-shutdown]]
+==== Debugging dracut on shutdown
+
+To debug the shutdown sequence on systemd systems, you can _rd.break_
+on _pre-shutdown_ or _shutdown_.
+
+To do this from an already booted system:
+----
+# mkdir -p /run/initramfs/etc/cmdline.d
+# echo "rd.break=pre-shutdown" > /run/initramfs/etc/cmdline.d/debug.conf
+# touch /run/initramfs/.need_shutdown
+----
+
+This will give you a dracut shell after the system pivot'ed back in the initramfs.
+
